import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart'; // –î–û–ë–ê–í–õ–ï–ù–û: –¥–ª—è kDebugMode
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import '../models/user_model.dart';
import '../services/api_service.dart';
import '../services/analytics_service.dart';  // ‚úÖ –°—Ä–µ–¥–ü-16

class AuthProvider with ChangeNotifier {
  String? _token;
  String? _refreshToken;
  String? _role;
  UserModel? _user;
  bool _isLoading = false;
  String? _errorMessage;

  final _storage = const FlutterSecureStorage();

  String? get token => _token;
  String? get refreshToken => _refreshToken;
  String? get role => _role;
  UserModel? get user => _user;
  bool get isLoading => _isLoading;
  String? get errorMessage => _errorMessage;
  bool get isAuthenticated => _token != null && _role != null && _user != null;

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  Future<void> loadAuthData() async {
    _token = await _storage.read(key: 'token');
    _refreshToken = await _storage.read(key: 'refresh_token');
    
    final prefs = await SharedPreferences.getInstance();
    _role = prefs.getString('role');
    final userJson = prefs.getString('user');
    if (userJson != null) {
      try {
        _user = UserModel.fromJson(jsonDecode(userJson));
      } catch (e) {
        print('Error loading user data: $e');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if (_token != null && _refreshToken != null) {
      print('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞...');
      final isValid = await _validateToken();
      if (!isValid) {
        print('‚ö†Ô∏è –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...');
        final refreshed = await refreshAccessToken();
        if (!refreshed) {
          print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ');
          await clearAuthData();
        }
      } else {
        print('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω');
      }
    }

    notifyListeners();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
  Future<bool> _validateToken() async {
    if (_token == null) return false;

    try {
      final response = await http.get(
        Uri.parse(ApiService.profileUrl),
        headers: {
          'Authorization': 'Bearer $_token',
          'Content-Type': 'application/json',
        },
      );

      return response.statusCode == 200;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: $e');
      return false;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  Future<void> _saveAuthData(String token, String role, Map<String, dynamic> userData, {String? refreshToken}) async {
    await _storage.write(key: 'token', value: token);
    
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('role', role);
    await prefs.setString('user', jsonEncode(userData));

    if (refreshToken != null) {
      await _storage.write(key: 'refresh_token', value: refreshToken);
      _refreshToken = refreshToken;
    }

    _token = token;
    _role = role;
    _user = UserModel.fromJson(userData);

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –≤ production
    if (kDebugMode) {
      print('‚úÖ AuthProvider: –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (role: $role)');
      print('üë§ User: ${_user?.name}, approved: ${_user?.isApproved}');
      print('üîê isAuthenticated = $isAuthenticated');
    }

    notifyListeners();
    if (kDebugMode) {
      print('üì¢ AuthProvider: notifyListeners() –≤—ã–∑–≤–∞–Ω');
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  Future<void> clearAuthData() async {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°—Ä–µ–¥–ü-16: Analytics –¥–ª—è –≤—ã—Ö–æ–¥–∞
    await AnalyticsService().logLogout();
    await AnalyticsService().clearUserData();
    
    await _storage.delete(key: 'token');
    await _storage.delete(key: 'refresh_token');

    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('role');
    await prefs.remove('user');
    _token = null;
    _role = null;
    _user = null;
    _errorMessage = null;
    notifyListeners();
  }

  // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  Future<bool> login(String email, String password) async {
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();

    try {
      print('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤—Ö–æ–¥...');
      print('üìß Email: $email');
      final url = ApiService.loginUrl;
      print('üåê URL: $url');
      final response = await http.post(
        Uri.parse(url),
        headers: {
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'username': email,
          'password': password,
        }),
      );
      print('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}');
      print('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final token = data['access'];  // –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT access token
        final refresh = data['refresh'];  // –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh token
        final userData = data['user'];
        final role = userData['role'];

        if (token != null && role != null && userData != null) {
          await _saveAuthData(token, role, userData, refreshToken: refresh);
          
          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°—Ä–µ–¥–ü-16: Analytics –¥–ª—è –≤—Ö–æ–¥–∞
          await AnalyticsService().logLogin(method: 'email');
          await AnalyticsService().setUserId(userData['id'].toString());
          await AnalyticsService().setUserProperties(
            role: role,
            rating: userData['rating'],
          );
          
          _isLoading = false;
          notifyListeners();
          return true;
        } else {
          _errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞';
        }
      } else {
        final data = jsonDecode(response.body);
        _errorMessage = data['error'] ?? '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞';
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞: $e');
      _errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e';
    }

    _isLoading = false;
    notifyListeners();
    return false;
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  Future<bool> register(String email, String password, String name, String phone, String role, {String? organizationName}) async {
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();

    try {
      final requestData = {
        'name': name,
        'email': email,
        'phone': phone,
        'password1': password,
        'password2': password,
        'role': role,
        'registration_source': 'mobile_app',
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º organization_name –µ—Å–ª–∏ —Ä–æ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä
      if (role == 'organizer' && organizationName != null && organizationName.isNotEmpty) {
        requestData['organization_name'] = organizationName;
      }

      final response = await http.post(
        Uri.parse(ApiService.registerUrl),
        headers: {
          'Content-Type': 'application/json',
        },
        body: jsonEncode(requestData),
      );

      print('üì° Register response: ${response.statusCode}');
      print('üìÑ Register body: ${response.body}');

      if (response.statusCode == 201) {
        final data = jsonDecode(response.body);
        final token = data['access'];  // –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT access token
        final refresh = data['refresh'];  // –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh token
        final userData = data['user'];

        if (token != null && userData != null) {
          await _saveAuthData(token, role, userData, refreshToken: refresh);
          
          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°—Ä–µ–¥–ü-16: Analytics –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
          await AnalyticsService().logSignUp(method: 'email', role: role);
          await AnalyticsService().setUserId(userData['id'].toString());
          await AnalyticsService().setUserProperties(role: role);
          
          _isLoading = false;
          notifyListeners();
          return true;
        } else {
          _errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞';
        }
      } else {
        final data = jsonDecode(response.body);
        _errorMessage = data['error'] ?? '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
      }
    } catch (e) {
      print('‚ùå Register error: $e');
      _errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e';
    }

    _isLoading = false;
    notifyListeners();
    return false;
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  Future<void> logout() async {
    await clearAuthData();
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  Future<bool> refreshUser() async {
    if (_token == null) return false;

    try {
      final response = await http.get(
        Uri.parse(ApiService.profileUrl),
        headers: {
          'Authorization': 'Bearer $_token',
          'Content-Type': 'application/json',
        },
      );

      print('üì° Refresh user response: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        _user = UserModel.fromJson(data);

        // Save updated user data
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString('user', jsonEncode(data));

        notifyListeners();
        return true;
      }
    } catch (e) {
      print('‚ùå Error refreshing user: $e');
    }
    return false;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access token —á–µ—Ä–µ–∑ refresh token
  Future<bool> refreshAccessToken() async {
    if (_refreshToken == null) {
      print('‚ö†Ô∏è Refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      return false;
    }

    try {
      final response = await http.post(
        Uri.parse(ApiService.tokenRefreshUrl),
        headers: {
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'refresh': _refreshToken,
        }),
      );

      print('üì° Refresh token response: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final newAccessToken = data['access'];

        if (newAccessToken != null) {
          await _storage.write(key: 'token', value: newAccessToken);
          _token = newAccessToken;
          notifyListeners();
          print('‚úÖ Access token —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω');
          return true;
        }
      } else {
        print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω: ${response.statusCode}');
        // Refresh token –∏—Å—Ç—ë–∫ - –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Ç—Ä–µ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥
        await clearAuthData();
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: $e');
    }
    return false;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<Map<String, dynamic>?> getUserProfile() async {
    if (_token == null) return null;

    try {
      final response = await http.get(
        Uri.parse(ApiService.profileUrl),
        headers: {
          'Authorization': 'Bearer $_token',
          'Content-Type': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else if (response.statusCode == 401) {
        // –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
        final refreshed = await refreshAccessToken();
        if (refreshed) {
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
          return await getUserProfile();
        }
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: $e');
    }
    return null;
  }
}
