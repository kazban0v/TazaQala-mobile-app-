import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:io' show Platform;
import '../models/user_model.dart';

class AuthProvider with ChangeNotifier {
  String? _token;
  String? _refreshToken;
  String? _role;
  UserModel? _user;
  bool _isLoading = false;
  String? _errorMessage;

  String? get token => _token;
  String? get refreshToken => _refreshToken;
  String? get role => _role;
  UserModel? get user => _user;
  bool get isLoading => _isLoading;
  String? get errorMessage => _errorMessage;
  bool get isAuthenticated => _token != null && _role != null && _user != null;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ URL
  String getBaseUrl() {
    if (Platform.isAndroid) {
      return 'http://10.0.2.2:8000'; // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π IP –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ localhost –∏–∑ Android —ç–º—É–ª—è—Ç–æ—Ä–∞
    } else if (Platform.isWindows || Platform.isMacOS || Platform.isLinux) {
      return 'http://localhost:8000'; // –î–ª—è desktop –ø–ª–∞—Ç—Ñ–æ—Ä–º –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost
    }
    return 'http://192.168.0.129:8000'; // –î–ª—è iOS –∏ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  Future<void> loadAuthData() async {
    final prefs = await SharedPreferences.getInstance();
    _token = prefs.getString('token');
    _refreshToken = prefs.getString('refresh_token');
    _role = prefs.getString('role');

    final userJson = prefs.getString('user');
    if (userJson != null) {
      try {
        _user = UserModel.fromJson(jsonDecode(userJson));
      } catch (e) {
        print('Error loading user data: $e');
      }
    }

    notifyListeners();
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  Future<void> _saveAuthData(String token, String role, Map<String, dynamic> userData, {String? refreshToken}) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('token', token);
    await prefs.setString('role', role);
    await prefs.setString('user', jsonEncode(userData));

    if (refreshToken != null) {
      await prefs.setString('refresh_token', refreshToken);
      _refreshToken = refreshToken;
    }

    _token = token;
    _role = role;
    _user = UserModel.fromJson(userData);

    print('üîê AuthProvider: –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ - token: ${token.substring(0, 20)}..., role: $role');
    print('üë§ User: ${_user?.name}, approved: ${_user?.isApproved}');
    print('‚úÖ AuthProvider: isAuthenticated = $isAuthenticated');

    notifyListeners();
    print('üì¢ AuthProvider: notifyListeners() –≤—ã–∑–≤–∞–Ω');
  }

  // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  Future<void> clearAuthData() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('token');
    await prefs.remove('role');
    await prefs.remove('user');
    _token = null;
    _role = null;
    _user = null;
    _errorMessage = null;
    notifyListeners();
  }

  // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  Future<bool> login(String email, String password) async {
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();

    try {
      print('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤—Ö–æ–¥...');
      print('üìß Email: $email');
      final url = '${getBaseUrl()}/custom-admin/api/login/';
      print('üåê URL: $url');
      final response = await http.post(
        Uri.parse(url),
        headers: {
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'username': email,
          'password': password,
        }),
      );
      print('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}');
      print('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final token = data['access'];  // –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT access token
        final refresh = data['refresh'];  // –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh token
        final userData = data['user'];
        final role = userData['role'];

        if (token != null && role != null && userData != null) {
          await _saveAuthData(token, role, userData, refreshToken: refresh);
          _isLoading = false;
          notifyListeners();
          return true;
        } else {
          _errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞';
        }
      } else {
        final data = jsonDecode(response.body);
        _errorMessage = data['error'] ?? '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞';
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞: $e');
      _errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e';
    }

    _isLoading = false;
    notifyListeners();
    return false;
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  Future<bool> register(String email, String password, String name, String phone, String role) async {
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();

    try {
      final response = await http.post(
        Uri.parse('${getBaseUrl()}/custom-admin/api/register/'),
        headers: {
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'name': name,
          'email': email,
          'phone': phone,
          'password1': password,
          'password2': password,
          'role': role,
        }),
      );

      print('üì° Register response: ${response.statusCode}');
      print('üìÑ Register body: ${response.body}');

      if (response.statusCode == 201) {
        final data = jsonDecode(response.body);
        final token = data['access'];  // –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT access token
        final refresh = data['refresh'];  // –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh token
        final userData = data['user'];

        if (token != null && userData != null) {
          await _saveAuthData(token, role, userData, refreshToken: refresh);
          _isLoading = false;
          notifyListeners();
          return true;
        } else {
          _errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞';
        }
      } else {
        final data = jsonDecode(response.body);
        _errorMessage = data['error'] ?? '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
      }
    } catch (e) {
      print('‚ùå Register error: $e');
      _errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e';
    }

    _isLoading = false;
    notifyListeners();
    return false;
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  Future<void> logout() async {
    await clearAuthData();
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  Future<bool> refreshUser() async {
    if (_token == null) return false;

    try {
      final response = await http.get(
        Uri.parse('${getBaseUrl()}/custom-admin/api/profile/'),
        headers: {
          'Authorization': 'Bearer $_token',
          'Content-Type': 'application/json',
        },
      );

      print('üì° Refresh user response: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        _user = UserModel.fromJson(data);

        // Save updated user data
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString('user', jsonEncode(data));

        notifyListeners();
        return true;
      }
    } catch (e) {
      print('‚ùå Error refreshing user: $e');
    }
    return false;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access token —á–µ—Ä–µ–∑ refresh token
  Future<bool> refreshAccessToken() async {
    if (_refreshToken == null) {
      print('‚ö†Ô∏è Refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      return false;
    }

    try {
      final response = await http.post(
        Uri.parse('${getBaseUrl()}/custom-admin/api/token/refresh/'),
        headers: {
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'refresh': _refreshToken,
        }),
      );

      print('üì° Refresh token response: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final newAccessToken = data['access'];

        if (newAccessToken != null) {
          final prefs = await SharedPreferences.getInstance();
          await prefs.setString('token', newAccessToken);
          _token = newAccessToken;
          notifyListeners();
          print('‚úÖ Access token —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω');
          return true;
        }
      } else {
        print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω: ${response.statusCode}');
        // Refresh token –∏—Å—Ç—ë–∫ - –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Ç—Ä–µ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥
        await clearAuthData();
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: $e');
    }
    return false;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<Map<String, dynamic>?> getUserProfile() async {
    if (_token == null) return null;

    try {
      final response = await http.get(
        Uri.parse('${getBaseUrl()}/custom-admin/api/profile/'),
        headers: {
          'Authorization': 'Bearer $_token',
          'Content-Type': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else if (response.statusCode == 401) {
        // –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
        final refreshed = await refreshAccessToken();
        if (refreshed) {
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
          return await getUserProfile();
        }
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: $e');
    }
    return null;
  }
}
