import 'package:http/http.dart' as http;
import 'dart:convert';
import '../providers/auth_provider.dart';
import 'package:flutter/foundation.dart';

/// HTTP Client —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ 401
/// 
/// –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
/// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–µ—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ (401 Unauthorized).
/// –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ 401, –∫–ª–∏–µ–Ω—Ç –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ refresh token
/// –∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º access token.
class AuthHttpClient {
  final AuthProvider authProvider;

  AuthHttpClient(this.authProvider);

  /// GET –∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º retry –ø—Ä–∏ 401
  Future<http.Response> get(
    Uri url, {
    Map<String, String>? headers,
  }) async {
    return _makeRequest(
      () => http.get(url, headers: _buildHeaders(headers)),
      () => http.get(url, headers: _buildHeaders(headers)),
    );
  }

  /// POST –∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º retry –ø—Ä–∏ 401
  Future<http.Response> post(
    Uri url, {
    Map<String, String>? headers,
    Object? body,
  }) async {
    return _makeRequest(
      () => http.post(url, headers: _buildHeaders(headers), body: body),
      () => http.post(url, headers: _buildHeaders(headers), body: body),
    );
  }

  /// PUT –∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º retry –ø—Ä–∏ 401
  Future<http.Response> put(
    Uri url, {
    Map<String, String>? headers,
    Object? body,
  }) async {
    return _makeRequest(
      () => http.put(url, headers: _buildHeaders(headers), body: body),
      () => http.put(url, headers: _buildHeaders(headers), body: body),
    );
  }

  /// DELETE –∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º retry –ø—Ä–∏ 401
  Future<http.Response> delete(
    Uri url, {
    Map<String, String>? headers,
  }) async {
    return _makeRequest(
      () => http.delete(url, headers: _buildHeaders(headers)),
      () => http.delete(url, headers: _buildHeaders(headers)),
    );
  }

  /// PATCH –∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º retry –ø—Ä–∏ 401
  Future<http.Response> patch(
    Uri url, {
    Map<String, String>? headers,
    Object? body,
  }) async {
    return _makeRequest(
      () => http.patch(url, headers: _buildHeaders(headers), body: body),
      () => http.patch(url, headers: _buildHeaders(headers), body: body),
    );
  }

  /// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ headers —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º Authorization
  Map<String, String> _buildHeaders(Map<String, String>? headers) {
    final finalHeaders = headers ?? {};
    
    // –î–æ–±–∞–≤–ª—è–µ–º Authorization header –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
    if (authProvider.token != null && authProvider.token!.isNotEmpty) {
      finalHeaders['Authorization'] = 'Bearer ${authProvider.token}';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º Content-Type –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if (!finalHeaders.containsKey('Content-Type')) {
      finalHeaders['Content-Type'] = 'application/json';
    }
    
    return finalHeaders;
  }

  /// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å retry –ø—Ä–∏ 401
  Future<http.Response> _makeRequest(
    Future<http.Response> Function() request,
    Future<http.Response> Function() retryRequest,
  ) async {
    try {
      // –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞
      var response = await request();

      // –ï—Å–ª–∏ 401 - –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
      if (response.statusCode == 401) {
        if (kDebugMode) {
          print('üîÑ Token expired (401), attempting refresh...');
        }

        final refreshed = await authProvider.refreshAccessToken();

        if (refreshed) {
          if (kDebugMode) {
            print('‚úÖ Token refreshed successfully, retrying request...');
          }
          
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
          response = await retryRequest();
          
          if (kDebugMode) {
            print('üì° Retry response status: ${response.statusCode}');
          }
        } else {
          if (kDebugMode) {
            print('‚ùå Token refresh failed, logging out...');
          }
          
          // –¢–æ–∫–µ–Ω –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å - –≤—ã—Ö–æ–¥–∏–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
          await authProvider.logout();
          
          throw Exception('Session expired. Please login again.');
        }
      }

      return response;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Request error: $e');
      }
      rethrow;
    }
  }

  /// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç–≤–µ—Ç–∞
  static Map<String, dynamic>? decodeResponse(http.Response response) {
    try {
      if (response.body.isNotEmpty) {
        return jsonDecode(response.body) as Map<String, dynamic>;
      }
      return null;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Failed to decode JSON: $e');
      }
      return null;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ (2xx)
  static bool isSuccess(http.Response response) {
    return response.statusCode >= 200 && response.statusCode < 300;
  }
}


