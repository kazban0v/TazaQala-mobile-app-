/// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°—Ä–µ–¥–ü-16: Firebase Analytics Service
import 'package:firebase_analytics/firebase_analytics.dart';
import 'package:firebase_core/firebase_core.dart';

class AnalyticsService {
  static final AnalyticsService _instance = AnalyticsService._internal();
  factory AnalyticsService() => _instance;
  AnalyticsService._internal();

  FirebaseAnalytics? _analytics;
  FirebaseAnalyticsObserver? _observer;
  bool _initialized = false;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Analytics
  Future<void> initialize() async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
      if (Firebase.apps.isEmpty) {
        print('‚ö†Ô∏è Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º Analytics');
        return;
      }

      _analytics = FirebaseAnalytics.instance;
      _observer = FirebaseAnalyticsObserver(analytics: _analytics!);
      _initialized = true;
      
      print('‚úÖ Firebase Analytics –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      await logAppOpen();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Analytics: $e');
      _initialized = false;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å observer –¥–ª—è Navigator
  FirebaseAnalyticsObserver? get observer => _observer;

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  bool get isInitialized => _initialized;

  // ========== –°–û–ë–´–¢–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ==========

  /// –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> logLogin({required String method}) async {
    if (!_initialized) return;
    try {
      await _analytics?.logLogin(loginMethod: method);
      print('üìä Analytics: Login ($method)');
    } catch (e) {
      print('‚ùå Analytics error: $e');
    }
  }

  /// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> logSignUp({required String method, required String role}) async {
    if (!_initialized) return;
    try {
      await _analytics?.logSignUp(signUpMethod: method);
      await _analytics?.logEvent(
        name: 'user_registered',
        parameters: {
          'method': method,
          'role': role,
          'timestamp': DateTime.now().toIso8601String(),
        },
      );
      print('üìä Analytics: Sign Up ($method, $role)');
    } catch (e) {
      print('‚ùå Analytics error: $e');
    }
  }

  /// –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> logLogout() async {
    if (!_initialized) return;
    try {
      await _analytics?.logEvent(name: 'logout');
      print('üìä Analytics: Logout');
    } catch (e) {
      print('‚ùå Analytics error: $e');
    }
  }

  // ========== –°–û–ë–´–¢–ò–Ø –ü–†–û–ï–ö–¢–û–í ==========

  /// –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–µ–∫—Ç–∞
  Future<void> logViewProject({required String projectId, required String projectName}) async {
    if (!_initialized) return;
    try {
      await _analytics?.logEvent(
        name: 'view_item',
        parameters: {
          'item_id': projectId,
          'item_name': projectName,
          'item_category': 'project',
        },
      );
      print('üìä Analytics: View Project ($projectName)');
    } catch (e) {
      print('‚ùå Analytics error: $e');
    }
  }

  /// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ø—Ä–æ–µ–∫—Ç—É
  Future<void> logJoinProject({required String projectId, required String projectName}) async {
    if (!_initialized) return;
    try {
      await _analytics?.logEvent(
        name: 'join_project',
        parameters: {
          'project_id': projectId,
          'project_name': projectName,
          'timestamp': DateTime.now().toIso8601String(),
        },
      );
      print('üìä Analytics: Join Project ($projectName)');
    } catch (e) {
      print('‚ùå Analytics error: $e');
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä)
  Future<void> logCreateProject({required String projectName, required String city}) async {
    if (!_initialized) return;
    try {
      await _analytics?.logEvent(
        name: 'create_project',
        parameters: {
          'project_name': projectName,
          'city': city,
          'timestamp': DateTime.now().toIso8601String(),
        },
      );
      print('üìä Analytics: Create Project ($projectName)');
    } catch (e) {
      print('‚ùå Analytics error: $e');
    }
  }

  // ========== –°–û–ë–´–¢–ò–Ø –ó–ê–î–ê–ß ==========

  /// –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–¥–∞—á–∏
  Future<void> logAcceptTask({required String taskId}) async {
    if (!_initialized) return;
    try {
      await _analytics?.logEvent(
        name: 'accept_task',
        parameters: {
          'task_id': taskId,
          'timestamp': DateTime.now().toIso8601String(),
        },
      );
      print('üìä Analytics: Accept Task ($taskId)');
    } catch (e) {
      print('‚ùå Analytics error: $e');
    }
  }

  /// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
  Future<void> logCompleteTask({required String taskId}) async {
    if (!_initialized) return;
    try {
      await _analytics?.logEvent(
        name: 'complete_task',
        parameters: {
          'task_id': taskId,
          'timestamp': DateTime.now().toIso8601String(),
        },
      );
      print('üìä Analytics: Complete Task ($taskId)');
    } catch (e) {
      print('‚ùå Analytics error: $e');
    }
  }

  // ========== –°–û–ë–´–¢–ò–Ø –§–û–¢–û ==========

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç–∞
  Future<void> logUploadPhoto({required String taskId, required String projectId}) async {
    if (!_initialized) return;
    try {
      await _analytics?.logEvent(
        name: 'upload_photo',
        parameters: {
          'task_id': taskId,
          'project_id': projectId,
          'timestamp': DateTime.now().toIso8601String(),
        },
      );
      print('üìä Analytics: Upload Photo (task: $taskId)');
    } catch (e) {
      print('‚ùå Analytics error: $e');
    }
  }

  /// –û–¥–æ–±—Ä–µ–Ω–∏–µ —Ñ–æ—Ç–æ (–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä)
  Future<void> logApprovePhoto({required String photoId, required int rating}) async {
    if (!_initialized) return;
    try {
      await _analytics?.logEvent(
        name: 'approve_photo',
        parameters: {
          'photo_id': photoId,
          'rating': rating,
          'timestamp': DateTime.now().toIso8601String(),
        },
      );
      print('üìä Analytics: Approve Photo (rating: $rating)');
    } catch (e) {
      print('‚ùå Analytics error: $e');
    }
  }

  // ========== –°–û–ë–´–¢–ò–Ø –î–û–°–¢–ò–ñ–ï–ù–ò–ô ==========

  /// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  Future<void> logUnlockAchievement({required String achievementId, required String achievementName}) async {
    if (!_initialized) return;
    try {
      await _analytics?.logEvent(
        name: 'unlock_achievement',
        parameters: {
          'achievement_id': achievementId,
        },
      );
      await _analytics?.logEvent(
        name: 'achievement_unlocked',
        parameters: {
          'achievement_id': achievementId,
          'achievement_name': achievementName,
          'timestamp': DateTime.now().toIso8601String(),
        },
      );
      print('üìä Analytics: Unlock Achievement ($achievementName)');
    } catch (e) {
      print('‚ùå Analytics error: $e');
    }
  }

  /// –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  Future<void> logViewAchievements() async {
    if (!_initialized) return;
    try {
      await _analytics?.logEvent(name: 'view_achievements');
      print('üìä Analytics: View Achievements');
    } catch (e) {
      print('‚ùå Analytics error: $e');
    }
  }

  // ========== –°–û–ë–´–¢–ò–Ø –ù–ê–í–ò–ì–ê–¶–ò–ò ==========

  /// –ü—Ä–æ—Å–º–æ—Ç—Ä —ç–∫—Ä–∞–Ω–∞
  Future<void> logScreenView({required String screenName, String? screenClass}) async {
    if (!_initialized) return;
    try {
      await _analytics?.logScreenView(
        screenName: screenName,
        screenClass: screenClass ?? screenName,
      );
      print('üìä Analytics: Screen View ($screenName)');
    } catch (e) {
      print('‚ùå Analytics error: $e');
    }
  }

  /// –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> logAppOpen() async {
    if (!_initialized) return;
    try {
      await _analytics?.logAppOpen();
      print('üìä Analytics: App Open');
    } catch (e) {
      print('‚ùå Analytics error: $e');
    }
  }

  // ========== –°–û–ë–´–¢–ò–Ø –ù–ê–°–¢–†–û–ï–ö ==========

  /// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞
  Future<void> logChangeLanguage({required String language}) async {
    if (!_initialized) return;
    try {
      await _analytics?.logEvent(
        name: 'change_language',
        parameters: {
          'language': language,
          'timestamp': DateTime.now().toIso8601String(),
        },
      );
      print('üìä Analytics: Change Language ($language)');
    } catch (e) {
      print('‚ùå Analytics error: $e');
    }
  }

  /// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
  Future<void> logChangeTheme({required String theme}) async {
    if (!_initialized) return;
    try {
      await _analytics?.logEvent(
        name: 'change_theme',
        parameters: {
          'theme': theme,
          'timestamp': DateTime.now().toIso8601String(),
        },
      );
      print('üìä Analytics: Change Theme ($theme)');
    } catch (e) {
      print('‚ùå Analytics error: $e');
    }
  }

  // ========== –ö–ê–°–¢–û–ú–ù–´–ï –°–û–ë–´–¢–ò–Ø ==========

  /// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
  Future<void> logCustomEvent({
    required String eventName,
    Map<String, dynamic>? parameters,
  }) async {
    if (!_initialized) return;
    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º dynamic –≤ Object –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Firebase
      final Map<String, Object>? convertedParams = parameters?.map(
        (key, value) => MapEntry(key, value as Object),
      );
      
      await _analytics?.logEvent(
        name: eventName,
        parameters: convertedParams,
      );
      print('üìä Analytics: $eventName ${parameters ?? ""}');
    } catch (e) {
      print('‚ùå Analytics error: $e');
    }
  }

  // ========== –£–°–¢–ê–ù–û–í–ö–ê –°–í–û–ô–°–¢–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ==========

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> setUserId(String userId) async {
    if (!_initialized) return;
    try {
      await _analytics?.setUserId(id: userId);
      print('üìä Analytics: Set User ID ($userId)');
    } catch (e) {
      print('‚ùå Analytics error: $e');
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> setUserProperties({
    String? role,
    String? city,
    int? rating,
  }) async {
    if (!_initialized) return;
    try {
      if (role != null) {
        await _analytics?.setUserProperty(name: 'user_role', value: role);
      }
      if (city != null) {
        await _analytics?.setUserProperty(name: 'user_city', value: city);
      }
      if (rating != null) {
        await _analytics?.setUserProperty(name: 'user_rating', value: rating.toString());
      }
      print('üìä Analytics: Set User Properties (role: $role, city: $city, rating: $rating)');
    } catch (e) {
      print('‚ùå Analytics error: $e');
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏ –≤—ã—Ö–æ–¥–µ)
  Future<void> clearUserData() async {
    if (!_initialized) return;
    try {
      await _analytics?.setUserId(id: null);
      print('üìä Analytics: Clear User Data');
    } catch (e) {
      print('‚ùå Analytics error: $e');
    }
  }
}

