import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import 'main.dart';
import 'notification_service.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'providers/auth_provider.dart';
import 'providers/volunteer_projects_provider.dart';
import 'services/api_service.dart';
import 'providers/volunteer_tasks_provider.dart';
import 'widgets/volunteer_type_badge.dart';
import 'screens/auth_screen.dart';


class VolunteerPage extends StatefulWidget {
   const VolunteerPage({super.key});

   @override
   State<VolunteerPage> createState() => _VolunteerPageState();
 }

class _VolunteerPageState extends State<VolunteerPage> {
    int _selectedIndex = 0;
    String? _selectedFilter; // null = all, 'social', 'environmental', 'cultural' 

    @override
    void initState() {
      super.initState();
      _setupNotificationListeners();
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      WidgetsBinding.instance.addPostFrameCallback((_) {
        context.read<VolunteerProjectsProvider>().loadProjects();
        context.read<VolunteerTasksProvider>().loadTasks();
      });
    }

    void _setupNotificationListeners() {
      // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ foreground
      FirebaseMessaging.onMessage.listen((RemoteMessage message) {
        print('üì± Volunteer page: –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ foreground');
        // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (message.data['type'] == 'task_assigned' ||
            message.data['type'] == 'project_deleted' ||
            message.data['type'] == 'photo_rejected') {
          context.read<VolunteerProjectsProvider>().loadProjects();
          context.read<VolunteerTasksProvider>().loadTasks();
        }
      });

      // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –æ—Ç–∫—Ä—ã–≤–∞–µ–º—ã—Ö –∏–∑ background
      FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
        print('üì± Volunteer page: –û—Ç–∫—Ä—ã—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ background');
        // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        context.read<VolunteerProjectsProvider>().loadProjects();
        context.read<VolunteerTasksProvider>().loadTasks();
      });
    }



  Future<Map<String, dynamic>?> _getUserProfile() async {
    final token = context.read<AuthProvider>().token;
    if (token == null) return null;

    try {
      final response = await http.get(
        Uri.parse('http://10.0.2.2:8000/custom-admin/api/profile/'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: $e');
    }
    return null;
  }

  Future<void> _joinProject(int projectId) async {
    final token = context.read<AuthProvider>().token;
    if (token == null) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –≤–æ–ª–æ–Ω—Ç–µ—Ä –º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∫ 1 –ø—Ä–æ–µ–∫—Ç—É
    final projects = context.read<VolunteerProjectsProvider>().projects;
    final joinedProjectsCount = projects.where((p) => p.isJoined).length;
    if (joinedProjectsCount >= 1) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('–í—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ'),
          backgroundColor: Colors.orange,
        ),
      );
      return;
    }

    try {
      final response = await http.post(
        Uri.parse(ApiService.projectJoinUrl(projectId)),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(data['message'] ?? '–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—Ä–æ–µ–∫—Ç—É!'),
            backgroundColor: Colors.green,
          ),
        );

        // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        context.read<VolunteerProjectsProvider>().loadProjects();
        context.read<VolunteerTasksProvider>().loadTasks();
      } else {
        final data = jsonDecode(response.body);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(data['error'] ?? '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø—Ä–æ–µ–∫—Ç—É: $e');
    }
  }

  Future<void> _leaveProject(int projectId) async {
    final authProvider = context.read<AuthProvider>();
    final token = authProvider.token;
    if (token == null) return;

    try {
      final response = await http.post(
        Uri.parse(ApiService.projectLeaveUrl(projectId)),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(data['message'] ?? '–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ø—Ä–æ–µ–∫—Ç'),
            backgroundColor: Colors.blue,
          ),
        );

        // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        context.read<VolunteerProjectsProvider>().loadProjects();
        context.read<VolunteerTasksProvider>().loadTasks();
      } else {
        final data = jsonDecode(response.body);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(data['error'] ?? '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞: $e');
    }
  }

  Future<void> _logout(BuildContext context) async {
     // –£–¥–∞–ª—è–µ–º FCM —Ç–æ–∫–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
     await NotificationService().removeTokenFromServer();

     final prefs = await SharedPreferences.getInstance();
     await prefs.remove('token');
     await prefs.remove('role');

     Navigator.pushReplacement(
       context,
       MaterialPageRoute(builder: (context) => const AuthScreen()),
     );
   }

  String _getStatusText(String status, Task? task) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
    if (task != null && task.deadlineDate != null && task.endTime != null) {
      try {
        final deadlineDate = DateTime.parse(task.deadlineDate!);
        final endTimeParts = task.endTime!.split(':');
        final deadlineDateTime = DateTime(
          deadlineDate.year,
          deadlineDate.month,
          deadlineDate.day,
          int.parse(endTimeParts[0]),
          int.parse(endTimeParts[1]),
        );

        if (DateTime.now().isAfter(deadlineDateTime) && status != 'completed') {
          return '–ó–∞–∫—Ä—ã—Ç–æ';
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
      }
    }

    switch (status) {
      case 'open':
        return '–û—Ç–∫—Ä—ã—Ç–æ';
      case 'in_progress':
        return '–í —Ä–∞–±–æ—Ç–µ';
      case 'completed':
        return '–í—ã–ø–æ–ª–Ω–µ–Ω–æ';
      case 'failed':
        return '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ';
      case 'closed':
        return '–ó–∞–∫—Ä—ã—Ç–æ';
      default:
        return status;
    }
  }

  Color _getStatusColor(String status, dynamic task) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
    if (task != null && task.deadlineDate != null && task.endTime != null) {
      try {
        final deadlineDate = DateTime.parse(task.deadlineDate!);
        final endTimeParts = task.endTime!.split(':');
        final deadlineDateTime = DateTime(
          deadlineDate.year,
          deadlineDate.month,
          deadlineDate.day,
          int.parse(endTimeParts[0]),
          int.parse(endTimeParts[1]),
        );

        if (DateTime.now().isAfter(deadlineDateTime) && status != 'completed') {
          return const Color(0xFF9E9E9E); // –°–µ—Ä—ã–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
      }
    }

    switch (status) {
      case 'open':
        return const Color(0xFF4CAF50);
      case 'in_progress':
        return const Color(0xFFFF9800);
      case 'completed':
        return const Color(0xFF2196F3);
      case 'failed':
        return const Color(0xFFF44336);
      case 'closed':
        return const Color(0xFF9E9E9E);
      default:
        return const Color(0xFF9E9E9E);
    }
  }

  String _formatDate(String? dateString) {
    if (dateString == null) return '';
    try {
      final date = DateTime.parse(dateString);
      return '${date.day.toString().padLeft(2, '0')}.${date.month.toString().padLeft(2, '0')}.${date.year}';
    } catch (e) {
      return dateString;
    }
  }

  String _formatTime(String? timeString) {
    if (timeString == null || timeString.isEmpty) return '';

    // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (RegExp(r'^\d{1,2}:\d{2}$').hasMatch(timeString)) {
      final parts = timeString.split(':');
      final hour = int.parse(parts[0]);
      final minute = int.parse(parts[1]);
      return '${hour.toString().padLeft(2, '0')}:${minute.toString().padLeft(2, '0')}';
    }

    // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ DateTime —Å—Ç—Ä–æ–∫—É
    try {
      final time = DateTime.parse('2024-01-01 $timeString');
      return '${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}';
    } catch (e) {
      // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
      return timeString;
    }
  }

  bool _isTaskClosed(dynamic task) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
    if (task.deadlineDate != null && task.endTime != null) {
      try {
        final deadlineDate = DateTime.parse(task.deadlineDate!);
        final endTimeParts = task.endTime!.split(':');
        final deadlineDateTime = DateTime(
          deadlineDate.year,
          deadlineDate.month,
          deadlineDate.day,
          int.parse(endTimeParts[0]),
          int.parse(endTimeParts[1]),
        );

        if (DateTime.now().isAfter(deadlineDateTime) && task.status != 'completed') {
          return true;
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
      }
    }
    return task.status == 'closed';
  }

  Color _getTaskAvailabilityColor(dynamic task) {
    if (_isTaskClosed(task)) {
      return const Color(0xFF9E9E9E); // –°–µ—Ä—ã–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö
    }
    if (task.isAssigned) {
      return const Color(0xFF4CAF50); // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö
    }
    return const Color(0xFFFF9800); // –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
  }

  IconData _getTaskAvailabilityIcon(dynamic task) {
    if (_isTaskClosed(task)) {
      return Icons.lock_clock; // –ó–∞–º–æ–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö
    }
    if (task.isAssigned) {
      return Icons.check_circle; // –ì–∞–ª–æ—á–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö
    }
    return Icons.schedule; // –ß–∞—Å—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
  }

  String _getTaskAvailabilityText(dynamic task) {
    if (_isTaskClosed(task)) {
      return '–ó–∞–∫—Ä—ã—Ç–æ';
    }
    if (task.isAssigned) {
      return '–ù–∞–∑–Ω–∞—á–µ–Ω–æ –≤–∞–º';
    }
    return '–î–æ—Å—Ç—É–ø–Ω–æ';
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'TazaQala',
          style: TextStyle(
            fontWeight: FontWeight.bold,
            color: Color(0xFF2E7D32),
          ),
        ),
        backgroundColor: Colors.white,
        elevation: 0,
        actions: [
          IconButton(
            icon: const Icon(
              Icons.logout,
              color: Color(0xFF4CAF50),
            ),
            onPressed: () => _logout(context),
            tooltip: '–í—ã–π—Ç–∏',
          ),
        ],
      ),
      body: IndexedStack(
        index: _selectedIndex,
        children: [
          _buildProjectsTab(),
          _buildTasksTab(),
          _buildProfileTab(),
        ],
      ),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _selectedIndex,
        onTap: (index) {
          setState(() {
            _selectedIndex = index;
          });
        },
        backgroundColor: Colors.white,
        selectedItemColor: const Color(0xFF4CAF50),
        unselectedItemColor: Colors.grey,
        selectedLabelStyle: const TextStyle(fontWeight: FontWeight.w600),
        items: const [
          BottomNavigationBarItem(
            icon: Icon(Icons.business),
            activeIcon: Icon(Icons.business, color: Color(0xFF4CAF50)),
            label: '–ü—Ä–æ–µ–∫—Ç—ã',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.task_alt),
            activeIcon: Icon(Icons.task_alt, color: Color(0xFF4CAF50)),
            label: '–ó–∞–¥–∞—á–∏',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.person_outline),
            activeIcon: Icon(Icons.person, color: Color(0xFF4CAF50)),
            label: '–ü—Ä–æ—Ñ–∏–ª—å',
          ),
        ],
      ),
    );
  }

  Widget _buildProjectsTab() {
    final projectsProvider = context.watch<VolunteerProjectsProvider>();

    if (projectsProvider.isLoading) {
      return const Center(child: CircularProgressIndicator());
    }

    // Apply filter
    final filteredProjects = _selectedFilter == null
        ? projectsProvider.projects
        : projectsProvider.projects.where((p) => p.volunteerType == _selectedFilter).toList();

    if (filteredProjects.isEmpty && _selectedFilter == null) {
      return RefreshIndicator(
        onRefresh: projectsProvider.loadProjects,
        child: ListView(
          children: const [
            SizedBox(height: 100),
            Center(
              child: Text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n\n–ü–æ—Ç—è–Ω–∏—Ç–µ –≤–Ω–∏–∑ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'),
            ),
          ],
        ),
      );
    }

    return Column(
      children: [
        // Filter chips
        Container(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          child: SingleChildScrollView(
            scrollDirection: Axis.horizontal,
            child: Row(
              children: [
                FilterChip(
                  label: const Text('–í—Å–µ'),
                  selected: _selectedFilter == null,
                  onSelected: (selected) {
                    setState(() {
                      _selectedFilter = null;
                    });
                  },
                  selectedColor: const Color(0xFF4CAF50).withValues(alpha: 0.2),
                  checkmarkColor: const Color(0xFF4CAF50),
                ),
                const SizedBox(width: 8),
                FilterChip(
                  label: const Text('–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å'),
                  selected: _selectedFilter == 'social',
                  onSelected: (selected) {
                    setState(() {
                      _selectedFilter = selected ? 'social' : null;
                    });
                  },
                  selectedColor: const Color(0xFFE91E63).withValues(alpha: 0.2),
                  checkmarkColor: const Color(0xFFE91E63),
                ),
                const SizedBox(width: 8),
                FilterChip(
                  label: const Text('–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ'),
                  selected: _selectedFilter == 'environmental',
                  onSelected: (selected) {
                    setState(() {
                      _selectedFilter = selected ? 'environmental' : null;
                    });
                  },
                  selectedColor: const Color(0xFF4CAF50).withValues(alpha: 0.2),
                  checkmarkColor: const Color(0xFF4CAF50),
                ),
                const SizedBox(width: 8),
                FilterChip(
                  label: const Text('–ö—É–ª—å—Ç—É—Ä–Ω—ã–µ'),
                  selected: _selectedFilter == 'cultural',
                  onSelected: (selected) {
                    setState(() {
                      _selectedFilter = selected ? 'cultural' : null;
                    });
                  },
                  selectedColor: const Color(0xFF9C27B0).withValues(alpha: 0.2),
                  checkmarkColor: const Color(0xFF9C27B0),
                ),
              ],
            ),
          ),
        ),
        // Empty state if filtered and no results
        if (filteredProjects.isEmpty && _selectedFilter != null)
          const Expanded(
            child: Center(
              child: Text('–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞'),
            ),
          ),
        // Projects list
        if (filteredProjects.isNotEmpty)
          Expanded(
            child: RefreshIndicator(
              onRefresh: projectsProvider.loadProjects,
              child: ListView.builder(
        itemCount: filteredProjects.length,
        itemBuilder: (context, index) {
          final project = filteredProjects[index];
          return Card(
            margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
            elevation: 4,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(16),
            ),
            child: Padding(
              padding: const EdgeInsets.all(20),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Expanded(
                        child: Text(
                          project.title,
                          style: const TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            color: Color(0xFF2E7D32),
                          ),
                        ),
                      ),
                      VolunteerTypeBadge(
                        volunteerTypeString: project.volunteerType,
                        showLabel: false,
                        size: 24,
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  VolunteerTypeBadge(
                    volunteerTypeString: project.volunteerType,
                    showLabel: true,
                    size: 20,
                  ),
                  const SizedBox(height: 12),
                  Text(
                    project.description,
                    style: const TextStyle(
                      fontSize: 14,
                      color: Colors.black87,
                      height: 1.4,
                    ),
                  ),
                  const SizedBox(height: 16),
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: const Color(0xFFF1F8E9),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Column(
                      children: [
                        Row(
                          children: [
                            Icon(Icons.location_on, size: 18, color: const Color(0xFF4CAF50)),
                            const SizedBox(width: 8),
                            Text(
                              project.city,
                              style: const TextStyle(fontSize: 14, color: Colors.black87),
                            ),
                            const SizedBox(width: 20),
                            Icon(Icons.person, size: 18, color: const Color(0xFF4CAF50)),
                            const SizedBox(width: 8),
                            Text(
                              project.creatorName,
                              style: const TextStyle(fontSize: 14, color: Colors.black87),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        Row(
                          children: [
                            Icon(Icons.group, size: 18, color: const Color(0xFF2196F3)),
                            const SizedBox(width: 8),
                            Text(
                              '${project.volunteerCount} –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤',
                              style: const TextStyle(fontSize: 14, color: Colors.black87),
                            ),
                            const SizedBox(width: 20),
                            Icon(Icons.task, size: 18, color: const Color(0xFFFF9800)),
                            const SizedBox(width: 8),
                            Text(
                              '${project.taskCount} –∑–∞–¥–∞—á',
                              style: const TextStyle(fontSize: 14, color: Colors.black87),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 20),
                  SizedBox(
                    width: double.infinity,
                    height: 50,
                    child: ElevatedButton(
                      onPressed: project.isJoined ? () => _leaveProject(project.id) : () => _joinProject(project.id),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: project.isJoined
                            ? const Color(0xFFF44336) // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –≤—ã—Ö–æ–¥–∞
                            : const Color(0xFF4CAF50), // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                        foregroundColor: Colors.white,
                        elevation: 3,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      child: Text(
                        project.isJoined ? '–ü–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ–µ–∫—Ç' : '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è',
                        style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          );
        },
              ),
            ),
          ),
      ],
    );
  }

  Widget _buildTasksTab() {
    final tasksProvider = context.watch<VolunteerTasksProvider>();

    if (tasksProvider.isLoading) {
      return const Center(child: CircularProgressIndicator());
    }

    if (tasksProvider.tasks.isEmpty) {
      return RefreshIndicator(
        onRefresh: tasksProvider.loadTasks,
        child: ListView(
          children: const [
            SizedBox(height: 100),
            Center(
              child: Text('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π\n\n–ü–æ—Ç—è–Ω–∏—Ç–µ –≤–Ω–∏–∑ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'),
            ),
          ],
        ),
      );
    }

    return RefreshIndicator(
      onRefresh: tasksProvider.loadTasks,
      child: ListView.builder(
        itemCount: tasksProvider.tasks.length,
        itemBuilder: (context, index) {
          final task = tasksProvider.tasks[index];
          return Card(
            margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
            elevation: 3,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(16),
            ),
            child: Padding(
              padding: const EdgeInsets.all(20),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: const Color(0xFFF1F8E9),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Row(
                      children: [
                        Icon(Icons.business, size: 20, color: const Color(0xFF4CAF50)),
                        const SizedBox(width: 8),
                        Expanded(
                          child: Text(
                            task.projectTitle,
                            style: const TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                              color: Color(0xFF2E7D32),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 16),
                  Text(
                    task.text,
                    style: const TextStyle(
                      fontSize: 16,
                      color: Colors.black87,
                      height: 1.4,
                    ),
                  ),
                  const SizedBox(height: 16),
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.grey[50],
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Row(
                      children: [
                        Icon(Icons.person, size: 18, color: const Color(0xFF4CAF50)),
                        const SizedBox(width: 8),
                        Text(
                          task.creatorName,
                          style: const TextStyle(
                            fontSize: 14,
                            color: Colors.black87,
                          ),
                        ),
                        const Spacer(),
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 4),
                          decoration: BoxDecoration(
                            color: _getTaskAvailabilityColor(task),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Text(
                            _getTaskAvailabilityText(task),
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 12,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                  if (task.deadlineDate != null || task.startTime != null || task.endTime != null) ...[
                    const SizedBox(height: 16),
                    Container(
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: const Color(0xFFFFF3E0),
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(color: const Color(0xFFFF9800).withOpacity(0.3)),
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          if (task.deadlineDate != null)
                            Row(
                              children: [
                                Icon(Icons.calendar_today, size: 18, color: const Color(0xFFF44336)),
                                const SizedBox(width: 8),
                                Text(
                                  '–î–µ–¥–ª–∞–π–Ω: ${_formatDate(task.deadlineDate)}',
                                  style: const TextStyle(
                                    fontSize: 14,
                                    color: Colors.black87,
                                    fontWeight: FontWeight.w500,
                                  ),
                                ),
                              ],
                            ),
                          if (task.startTime != null || task.endTime != null) ...[
                            const SizedBox(height: 8),
                            Row(
                              children: [
                                Icon(Icons.access_time, size: 18, color: const Color(0xFF2196F3)),
                                const SizedBox(width: 8),
                                Text(
                                  '–í—Ä–µ–º—è: ${_formatTime(task.startTime)} - ${_formatTime(task.endTime)}',
                                  style: const TextStyle(
                                    fontSize: 14,
                                    color: Colors.black87,
                                    fontWeight: FontWeight.w500,
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ],
                      ),
                    ),
                  ],
                  const SizedBox(height: 16),
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                    decoration: BoxDecoration(
                      color: _getTaskAvailabilityColor(task),
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(
                          _getTaskAvailabilityIcon(task),
                          color: Colors.white,
                          size: 16,
                        ),
                        const SizedBox(width: 6),
                        Text(
                          _getTaskAvailabilityText(task),
                          style: const TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }

  Widget _buildProfileTab() {
    return Container(
      decoration: const BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
          colors: [
            Color(0xFFE8F5E8),
            Color(0xFFF1F8E9),
            Color(0xFFFFFFFF),
          ],
        ),
      ),
      child: SingleChildScrollView(
        padding: const EdgeInsets.all(20),
        child: Column(
          children: [
            const SizedBox(height: 20),
            // –ê–≤–∞—Ç–∞—Ä –∏ –∏–º—è
            Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(20),
                boxShadow: [
                  BoxShadow(
                    color: Colors.green.withOpacity(0.1),
                    blurRadius: 10,
                    offset: const Offset(0, 5),
                  ),
                ],
              ),
              child: Column(
                children: [
                  Container(
                    width: 80,
                    height: 80,
                    decoration: BoxDecoration(
                      color: const Color(0xFF4CAF50),
                      borderRadius: BorderRadius.circular(40),
                    ),
                    child: const Icon(
                      Icons.person,
                      size: 40,
                      color: Colors.white,
                    ),
                  ),
                  const SizedBox(height: 16),
                  FutureBuilder<Map<String, dynamic>?>(
                    future: _getUserProfile(),
                    builder: (context, snapshot) {
                      final userName = snapshot.data?['name'] ?? '–í–æ–ª–æ–Ω—Ç—ë—Ä';
                      return Text(
                        userName,
                        style: const TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF2E7D32),
                        ),
                        textAlign: TextAlign.center,
                      );
                    },
                  ),
                  const SizedBox(height: 8),
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: const Color(0xFFFFC107),
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: const Text(
                      '‚≠ê –†–µ–π—Ç–∏–Ω–≥: 0',
                      style: TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 24),

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            Row(
              children: [
                Expanded(
                  child: _buildStatCard(
                    '–ü—Ä–æ–µ–∫—Ç—ã',
                    context.watch<VolunteerProjectsProvider>().projects.where((p) => p.isJoined).length.toString(),
                    Icons.business,
                    const Color(0xFF4CAF50),
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: _buildStatCard(
                    '–ó–∞–¥–∞—á–∏',
                    context.watch<VolunteerTasksProvider>().tasks.where((t) => t.isAssigned).length.toString(),
                    Icons.task_alt,
                    const Color(0xFF2196F3),
                  ),
                ),
              ],
            ),

            const SizedBox(height: 16),

            Row(
              children: [
                Expanded(
                  child: _buildStatCard(
                    '–§–æ—Ç–æ',
                    '0',
                    Icons.photo_camera,
                    const Color(0xFFFF9800),
                  ),
                ),
                const SizedBox(width: 16),
                // –£–±—Ä–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—ã –∫–∞–∫ –ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
              ],
            ),

            const SizedBox(height: 32),

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(20),
                boxShadow: [
                  BoxShadow(
                    color: Colors.green.withOpacity(0.1),
                    blurRadius: 10,
                    offset: const Offset(0, 5),
                  ),
                ],
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    '–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Color(0xFF2E7D32),
                    ),
                  ),
                  const SizedBox(height: 12),
                  Text(
                    'TazaQala - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à –≥–æ—Ä–æ–¥ —á–∏—â–µ –∏ –ª—É—á—à–µ.',
                    style: TextStyle(
                      fontSize: 14,
                      color: Colors.grey[600],
                      height: 1.5,
                    ),
                  ),
                  const SizedBox(height: 16),
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: const Color(0xFFF1F8E9),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Column(
                      children: [
                        Row(
                          children: [
                            const Icon(
                              Icons.eco,
                              color: Color(0xFF4CAF50),
                            ),
                            const SizedBox(width: 12),
                            Expanded(
                              child: Text(
                                '–í–º–µ—Å—Ç–µ –º—ã –¥–µ–ª–∞–µ–º –ê–ª–º–∞—Ç—ã –∑–µ–ª–µ–Ω–µ–µ –∏ —á–∏—â–µ!',
                                style: TextStyle(
                                  color: Colors.grey[700],
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        Text(
                          '–ë—ñ—Ä–≥–µ –±—ñ–∑ –ê–ª–º–∞—Ç—ã–Ω—ã –∂–∞—Å—ã–ª –∂”ô–Ω–µ —Ç–∞–∑–∞ –µ—Ç–µ–º—ñ–∑!',
                          style: TextStyle(
                            color: Colors.grey[600],
                            fontSize: 12,
                            fontStyle: FontStyle.italic,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStatCard(String title, String value, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.green.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        children: [
          Icon(
            icon,
            color: color,
            size: 32,
          ),
          const SizedBox(height: 8),
          Text(
            value,
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            title,
            style: TextStyle(
              fontSize: 12,
              color: Colors.grey[600],
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      ),
    );
  }
}