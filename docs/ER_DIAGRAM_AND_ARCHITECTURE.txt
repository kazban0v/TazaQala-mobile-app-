# 🗄️ ER-диаграмма и архитектура системы BirQadam

> Полная схема базы данных и архитектура платформы для волонтеров

---

## 📊 ER-Диаграмма (Entity-Relationship Diagram)

### Полная схема базы данных

```
┌─────────────────────────────────────────────────────────────────────────┐
│                            БАЗА ДАННЫХ                                  │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│                         ОСНОВНЫЕ СУЩНОСТИ                               │
└─────────────────────────────────────────────────────────────────────────┘


                        ┌──────────────────────────┐
                        │        USERS             │
                        │  (Пользователи)          │
                        ├──────────────────────────┤
                        │ id (PK)                  │
                        │ username                 │
                        │ email                    │
                        │ password                 │
                        │ phone                    │
                        │ name                     │
                        │ role                     │  ← 'volunteer', 'organizer', 
                        │ is_approved              │    'moderator', 'sponsor', 'partner'
                        │ rating                   │
                        │ organization_name        │
                        │ profile_photo            │
                        │ created_at               │
                        │ updated_at               │
                        └─────────────┬────────────┘
                                      │
                    ┌─────────────────┼─────────────────┐
                    │                 │                 │
                    │                 │                 │
         ┌──────────▼──────────┐     │      ┌──────────▼──────────┐
         │     PROJECTS        │     │      │  FCM_TOKENS         │
         │   (Проекты)         │     │      │  (Push токены)      │
         ├─────────────────────┤     │      ├─────────────────────┤
         │ id (PK)             │     │      │ id (PK)             │
         │ title               │     │      │ user_id (FK)        │
         │ description         │     │      │ token               │
         │ city                │     │      │ device_type         │
         │ status              │     │      │ created_at          │
         │ volunteer_type      │     │      │ updated_at          │
         │ latitude            │     │      └─────────────────────┘
         │ longitude           │     │
         │ organizer_id (FK) ──┘     │
         │ qr_code             │     │
         │ max_volunteers      │     │      ┌─────────────────────┐
         │ created_at          │     │      │   ACTIVITIES        │
         │ updated_at          │     │      │  (История)          │
         └──────────┬──────────┘     │      ├─────────────────────┤
                    │                │      │ id (PK)             │
                    │                └──────┤ user_id (FK)        │
         ┌──────────▼──────────┐            │ activity_type       │
         │       TASKS         │            │ description         │
         │     (Задачи)        │            │ related_id          │
         ├─────────────────────┤            │ created_at          │
         │ id (PK)             │            └─────────────────────┘
         │ text                │
         │ status              │
         │ deadline            │
         │ start_time          │            ┌─────────────────────┐
         │ end_time            │            │  ACHIEVEMENTS       │
         │ max_volunteers      │            │  (Достижения)       │
         │ project_id (FK)     │            ├─────────────────────┤
         │ assigned_to (FK) ───┼────────┐   │ id (PK)             │
         │ created_at          │        │   │ title               │
         │ updated_at          │        │   │ description         │
         └──────────┬──────────┘        │   │ icon                │
                    │                   │   │ required_points     │
                    │                   │   │ category            │
         ┌──────────▼──────────┐        │   │ volunteer_type      │
         │   PHOTO_REPORTS     │        │   └──────────┬──────────┘
         │   (Фотоотчеты)      │        │              │
         ├─────────────────────┤        │              │
         │ id (PK)             │        │   ┌──────────▼──────────┐
         │ task_id (FK)        │        │   │ USER_ACHIEVEMENTS   │
         │ volunteer_id (FK) ──┼────────┘   │  (Связь)            │
         │ photo               │            ├─────────────────────┤
         │ description         │            │ id (PK)             │
         │ status              │            │ user_id (FK)        │
         │ rating              │            │ achievement_id (FK) │
         │ organizer_comment   │            │ unlocked_at         │
         │ rejection_reason    │            └─────────────────────┘
         │ created_at          │
         │ updated_at          │
         └──────────┬──────────┘
                    │
         ┌──────────▼──────────┐
         │   PHOTO_GALLERY     │
         │  (Публичная галерея)│
         ├─────────────────────┤
         │ id (PK)             │
         │ project_id (FK)     │
         │ photo_report_id (FK)│
         │ photo_url           │
         │ is_public           │
         │ created_at          │
         └─────────────────────┘


┌─────────────────────────────────────────────────────────────────────────┐
│                    РЕЙТИНГОВАЯ СИСТЕМА                                  │
└─────────────────────────────────────────────────────────────────────────┘

         ┌─────────────────────┐
         │      RATINGS        │
         │   (Рейтинги)        │
         ├─────────────────────┤
         │ id (PK)             │
         │ user_id (FK) ───────┼──────► users.id (кого оценивают)
         │ rated_by (FK) ──────┼──────► users.id (кто оценивает)
         │ rating_type         │  ← 'volunteer_rating', 'organizer_rating'
         │ target_id           │
         │ rating (1-5)        │
         │ quality_score       │
         │ punctuality_score   │
         │ communication_score │
         │ comment             │
         │ created_at          │
         └─────────────────────┘


┌─────────────────────────────────────────────────────────────────────────┐
│                  КОММУНИКАЦИЯ И ЧАТ (WebSocket)                         │
└─────────────────────────────────────────────────────────────────────────┘

         ┌─────────────────────┐
         │   CONVERSATIONS     │
         │   (Беседы/Чаты)     │
         ├─────────────────────┤
         │ id (PK)             │
         │ type                │  ← 'private', 'group'
         │ project_id (FK)     │  ← NULL для личных чатов
         │ created_at          │
         │ updated_at          │
         └──────────┬──────────┘
                    │
        ┌───────────┼───────────┐
        │           │           │
┌───────▼─────┐     │    ┌──────▼──────────────┐
│  MESSAGES   │     │    │ CONVERSATION_       │
│ (Сообщения) │     │    │ PARTICIPANTS        │
├─────────────┤     │    │ (Участники чата)    │
│ id (PK)     │     │    ├─────────────────────┤
│ conversation│     │    │ id (PK)             │
│  _id (FK)   │     │    │ conversation_id (FK)│
│ sender_id   │     └────┤ user_id (FK)        │
│  (FK)       │          │ joined_at           │
│ message_text│          │ last_read_at        │
│ attachment  │          └─────────────────────┘
│ is_read     │
│ created_at  │
└─────────────┘


┌─────────────────────────────────────────────────────────────────────────┐
│                      КАЛЕНДАРЬ СОБЫТИЙ                                  │
└─────────────────────────────────────────────────────────────────────────┘

         ┌─────────────────────┐
         │       EVENTS        │
         │    (События)        │
         ├─────────────────────┤
         │ id (PK)             │
         │ title               │
         │ description         │
         │ event_type          │  ← 'project_start', 'task_deadline', etc.
         │ project_id (FK)     │
         │ task_id (FK)        │
         │ event_date          │
         │ event_time          │
         │ location            │
         │ organizer_id (FK)   │
         │ created_at          │
         └──────────┬──────────┘
                    │
         ┌──────────▼──────────┐
         │  EVENT_PARTICIPANTS │
         │  (Участники события)│
         ├─────────────────────┤
         │ id (PK)             │
         │ event_id (FK)       │
         │ user_id (FK)        │
         │ reminder_sent       │
         │ joined_at           │
         └─────────────────────┘


┌─────────────────────────────────────────────────────────────────────────┐
│              СПОНСОРЫ И ПАРТНЕРЫ (Новые роли)                          │
└─────────────────────────────────────────────────────────────────────────┘

         ┌─────────────────────┐              ┌─────────────────────┐
         │   SPONSORSHIPS      │              │     RESOURCES       │
         │  (Спонсирование)    │              │  (Ресурсы партнеров)│
         ├─────────────────────┤              ├─────────────────────┤
         │ id (PK)             │              │ id (PK)             │
         │ sponsor_id (FK) ────┼──► users.id  │ partner_id (FK) ────┼──► users.id
         │ project_id (FK)     │              │ resource_type       │
         │ amount              │              │ title               │
         │ purpose             │              │ description         │
         │ status              │              │ availability        │
         │ transaction_id      │              │ created_at          │
         │ created_at          │              └──────────┬──────────┘
         └─────────────────────┘                         │
                                               ┌──────────▼──────────┐
                                               │  RESOURCE_REQUESTS  │
                                               │  (Запросы ресурсов) │
                                               ├─────────────────────┤
                                               │ id (PK)             │
                                               │ resource_id (FK)    │
                                               │ project_id (FK)     │
                                               │ organizer_id (FK)   │
                                               │ status              │
                                               │ request_date        │
                                               │ notes               │
                                               │ created_at          │
                                               └─────────────────────┘


┌─────────────────────────────────────────────────────────────────────────┐
│                   QR-КОДЫ ДЛЯ ПРОЕКТОВ                                  │
└─────────────────────────────────────────────────────────────────────────┘

         ┌─────────────────────┐
         │      QR_CODES       │
         │   (QR коды)         │
         ├─────────────────────┤
         │ id (PK)             │
         │ project_id (FK) ────┼──────► projects.id
         │ qr_code_data        │
         │ qr_image_url        │
         │ created_at          │
         └─────────────────────┘
```

---

## 🔗 Связи между таблицами (Relationships)

### 1️⃣ Users → Projects (1:N)
```
users.id ──────► projects.organizer_id
Один организатор может создать много проектов
```

### 2️⃣ Projects → Tasks (1:N)
```
projects.id ──────► tasks.project_id
Один проект содержит много задач
```

### 3️⃣ Users → Tasks (1:N)
```
users.id ──────► tasks.assigned_to
Один волонтер может быть назначен на много задач
```

### 4️⃣ Tasks → Photo Reports (1:N)
```
tasks.id ──────► photo_reports.task_id
Одна задача может иметь много фотоотчетов
```

### 5️⃣ Users → Photo Reports (1:N)
```
users.id ──────► photo_reports.volunteer_id
Один волонтер может загрузить много фотоотчетов
```

### 6️⃣ Users ↔ Achievements (M:N через user_achievements)
```
users.id ──────► user_achievements.user_id
achievements.id ──────► user_achievements.achievement_id
Многие пользователи могут иметь много достижений
```

### 7️⃣ Users → Ratings (1:N, двунаправленная)
```
users.id ──────► ratings.user_id (кого оценивают)
users.id ──────► ratings.rated_by (кто оценивает)
Пользователи могут оценивать друг друга
```

### 8️⃣ Conversations → Messages (1:N)
```
conversations.id ──────► messages.conversation_id
Один чат содержит много сообщений
```

### 9️⃣ Users ↔ Conversations (M:N через conversation_participants)
```
users.id ──────► conversation_participants.user_id
conversations.id ──────► conversation_participants.conversation_id
Многие пользователи в многих чатах
```

### 🔟 Projects → Events (1:N)
```
projects.id ──────► events.project_id
Один проект может иметь много событий
```

### 1️⃣1️⃣ Users → Sponsorships (1:N)
```
users.id (sponsor) ──────► sponsorships.sponsor_id
Один спонсор может спонсировать много проектов
```

### 1️⃣2️⃣ Users → Resources (1:N)
```
users.id (partner) ──────► resources.partner_id
Один партнер может предоставить много ресурсов
```

### 1️⃣3️⃣ Projects → QR Codes (1:1)
```
projects.id ──────► qr_codes.project_id
Один проект имеет один уникальный QR-код
```

---

## 🏗️ Архитектура системы

### Трехуровневая архитектура

```
┌─────────────────────────────────────────────────────────────────────────┐
│                                                                         │
│                         УРОВЕНЬ 1: КЛИЕНТ                               │
│                      (Mobile App - Flutter)                             │
│                                                                         │
└─────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────────┐
│                                                                       │
│  ┌─────────────┐  ┌─────────────┐  ┌──────────┐  ┌──────────────┐  │
│  │  ВОЛОНТЕР   │  │ ОРГАНИЗАТОР │  │МОДЕРАТОР │  │СПОНСОР/      │  │
│  │             │  │             │  │          │  │ПАРТНЕР       │  │
│  │ • Проекты   │  │ • Создание  │  │• Проверка│  │• Спонсирова- │  │
│  │ • Задачи    │  │   проектов  │  │  заявок  │  │  ние проектов│  │
│  │ • Фотоотчеты│  │ • Управление│  │• Модерация│ │• Предоставле-│  │
│  │ • Чат       │  │   задачами  │  │  проектов│  │  ние ресурсов│  │
│  │ • Карта     │  │ • Наблюдение│  │• Аналитика│ │• Отчеты      │  │
│  │ • Календарь │  │   за волон- │  │  платформы│ │              │  │
│  │ • QR-сканер │  │   терами    │  │          │  │              │  │
│  │ • Достижения│  │ • Аналитика │  │          │  │              │  │
│  │ • Оффлайн   │  │ • Отчеты    │  │          │  │              │  │
│  │   режим     │  │   (PDF/Excel)│ │          │  │              │  │
│  └─────────────┘  └─────────────┘  └──────────┘  └──────────────┘  │
│                                                                       │
│  ┌─────────────────────────────────────────────────────────────────┐ │
│  │           STATE MANAGEMENT (Provider)                           │ │
│  │  • AuthProvider           • ChatProvider                        │ │
│  │  • ProjectsProvider       • CalendarProvider                    │ │
│  │  • TasksProvider          • MapProvider                         │ │
│  │  • PhotoReportsProvider   • RatingProvider                      │ │
│  │  • AchievementsProvider   • OfflineSyncProvider                 │ │
│  └─────────────────────────────────────────────────────────────────┘ │
│                                                                       │
│  ┌─────────────────────────────────────────────────────────────────┐ │
│  │                    SERVICES                                     │ │
│  │  • API Service (REST)     • QR Code Service                     │ │
│  │  • WebSocket Service      • Offline Sync Service                │ │
│  │  • Notification Service   • Map Service                         │ │
│  │  • Geolocation Service    • Storage Service (Hive/SQLite)       │ │
│  └─────────────────────────────────────────────────────────────────┘ │
│                                                                       │
│  ┌─────────────────────────────────────────────────────────────────┐ │
│  │              ЛОКАЛЬНОЕ ХРАНИЛИЩЕ                                │ │
│  │  • SharedPreferences (токены, настройки)                        │ │
│  │  • Flutter Secure Storage (конфиденциальные данные)             │ │
│  │  • Hive/SQLite (оффлайн-кеш проектов, задач, сообщений)         │ │
│  └─────────────────────────────────────────────────────────────────┘ │
└───────────────────────────────────────────────────────────────────────┘
                                  ⬇⬆
                    ┌──────────────────────────────┐
                    │  REST API (HTTPS, JSON)      │
                    │  WebSocket (Real-time чат)   │
                    │  Firebase Cloud Messaging    │
                    └──────────────────────────────┘
                                  ⬇⬆

┌─────────────────────────────────────────────────────────────────────────┐
│                                                                         │
│                    УРОВЕНЬ 2: СЕРВЕР (Backend)                          │
│                      (Django + DRF + Channels)                          │
│                                                                         │
└─────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────────┐
│                                                                       │
│  ┌─────────────────────────────────────────────────────────────────┐ │
│  │           AUTH SERVICE (JWT Authentication)                     │ │
│  │  • Регистрация пользователей (5 ролей)                         │ │
│  │  • Авторизация (JWT Token)                                      │ │
│  │  • Модерация и проверка администратором                         │ │
│  │  • Обновление токенов                                           │ │
│  └─────────────────────────────────────────────────────────────────┘ │
│                                                                       │
│  ┌─────────────────────────────────────────────────────────────────┐ │
│  │           VOLUNTEER SERVICE                                     │ │
│  │  • Управление задачами                                          │ │
│  │  • Загрузка фотоотчетов                                         │ │
│  │  • Система достижений (автоматическая выдача)                   │ │
│  │  • Отслеживание активности                                      │ │
│  │  • Детальная рейтинговая система                                │ │
│  │  • Просмотр проектов с фильтрацией                              │ │
│  └─────────────────────────────────────────────────────────────────┘ │
│                                                                       │
│  ┌─────────────────────────────────────────────────────────────────┐ │
│  │           ORGANIZER SERVICE                                     │ │
│  │  • CRUD операции с проектами                                    │ │
│  │  • Создание задач внутри проекта                                │ │
│  │  • Наблюдение за участниками проекта                            │ │
│  │  • Модерация фотоотчетов (одобрение/отклонение)                 │ │
│  │  • Детальная аналитика и отчеты                                 │ │
│  │  • Экспорт отчетов (PDF/Excel)                                  │ │
│  │  • Генерация QR-кодов                                           │ │
│  └─────────────────────────────────────────────────────────────────┘ │
│                                                                       │
│  ┌─────────────────────────────────────────────────────────────────┐ │
│  │           MODERATOR SERVICE                                     │ │
│  │  • Модерация пользователей (проверка организаторов/спонсоров)  │ │
│  │  • Модерация проектов                                           │ │
│  │  • Общая аналитика платформы                                    │ │
│  │  • Блокировка нарушителей                                       │ │
│  └─────────────────────────────────────────────────────────────────┘ │
│                                                                       │
│  ┌─────────────────────────────────────────────────────────────────┐ │
│  │           SPONSOR/PARTNER SERVICE                               │ │
│  │  • Спонсирование проектов (платежи)                             │ │
│  │  • Управление ресурсами (партнеры)                              │ │
│  │  • Отчеты о расходовании средств                                │ │
│  │  • История взаимодействия                                       │ │
│  └─────────────────────────────────────────────────────────────────┘ │
│                                                                       │
│  ┌─────────────────────────────────────────────────────────────────┐ │
│  │      COMMUNICATION SERVICE (WebSocket - Django Channels)        │ │
│  │  • Real-time чаты (личные и групповые)                          │ │
│  │  • Отправка и получение сообщений                               │ │
│  │  • История сообщений                                            │ │
│  │  • Статус прочтения (галочки)                                   │ │
│  └─────────────────────────────────────────────────────────────────┘ │
│                                                                       │
│  ┌─────────────────────────────────────────────────────────────────┐ │
│  │           CALENDAR SERVICE                                      │ │
│  │  • Создание событий                                             │ │
│  │  • Управление участниками событий                               │ │
│  │  • Автоматические напоминания                                   │ │
│  └─────────────────────────────────────────────────────────────────┘ │
│                                                                       │
│  ┌─────────────────────────────────────────────────────────────────┐ │
│  │           MAP SERVICE                                           │ │
│  │  • Геолокация проектов (latitude, longitude)                    │ │
│  │  • Поиск проектов рядом с пользователем                         │ │
│  │  • Геолокационные уведомления (триггеры)                        │ │
│  │  • Построение маршрутов (интеграция с Maps API)                 │ │
│  └─────────────────────────────────────────────────────────────────┘ │
│                                                                       │
│  ┌─────────────────────────────────────────────────────────────────┐ │
│  │      NOTIFICATION SERVICE (Firebase Admin SDK)                  │ │
│  │  • Push-уведомления (FCM)                                       │ │
│  │  • Геолокационные уведомления                                   │ │
│  │  • Управление FCM токенами                                      │ │
│  │  • Отложенные уведомления (Celery)                              │ │
│  └─────────────────────────────────────────────────────────────────┘ │
│                                                                       │
│  ┌─────────────────────────────────────────────────────────────────┐ │
│  │           QR CODE SERVICE                                       │ │
│  │  • Генерация уникальных QR-кодов для проектов                   │ │
│  │  • Валидация QR-кодов                                           │ │
│  │  • Быстрое присоединение к проектам                             │ │
│  └─────────────────────────────────────────────────────────────────┘ │
│                                                                       │
│  ┌─────────────────────────────────────────────────────────────────┐ │
│  │           RATING SERVICE                                        │ │
│  │  • Детальная система оценок                                     │ │
│  │  • Рейтинг волонтеров (качество, пунктуальность)               │ │
│  │  • Рейтинг организаторов (отзывы от волонтеров)                │ │
│  │  • Публичные профили с рейтингом                                │ │
│  └─────────────────────────────────────────────────────────────────┘ │
│                                                                       │
│  ┌─────────────────────────────────────────────────────────────────┐ │
│  │           ANALYTICS & EXPORT SERVICE                            │ │
│  │  • Генерация детальной статистики                               │ │
│  │  • Графики (Bar, Line, Pie charts)                              │ │
│  │  • Экспорт отчетов в PDF (с графиками)                          │ │
│  │  • Экспорт отчетов в Excel                                      │ │
│  └─────────────────────────────────────────────────────────────────┘ │
│                                                                       │
│  ┌─────────────────────────────────────────────────────────────────┐ │
│  │           OFFLINE SYNC SERVICE                                  │ │
│  │  • Кеширование данных                                           │ │
│  │  • Синхронизация при восстановлении соединения                  │ │
│  │  • Конфликт-резолвинг                                           │ │
│  └─────────────────────────────────────────────────────────────────┘ │
│                                                                       │
│  ┌─────────────────────────────────────────────────────────────────┐ │
│  │           TELEGRAM BOT SERVICE                                  │ │
│  │  • Обратная связь от пользователей                              │ │
│  │  • Уведомления администраторам                                  │ │
│  │  • Техническая поддержка                                        │ │
│  └─────────────────────────────────────────────────────────────────┘ │
│                                                                       │
└───────────────────────────────────────────────────────────────────────┘
                                  ⬇⬆
                    ┌──────────────────────────────┐
                    │     DATABASE QUERIES         │
                    │     (SQL, ORM)               │
                    └──────────────────────────────┘
                                  ⬇⬆

┌─────────────────────────────────────────────────────────────────────────┐
│                                                                         │
│                  УРОВЕНЬ 3: БАЗА ДАННЫХ                                 │
│                        (PostgreSQL)                                     │
│                                                                         │
└─────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────────┐
│                                                                       │
│  ┌───────────────────────────────────────────────────────────────┐   │
│  │                  ОСНОВНЫЕ ТАБЛИЦЫ                             │   │
│  │  • users (пользователи: 5 ролей)                             │   │
│  │  • projects (проекты организаторов)                          │   │
│  │  • tasks (задачи внутри проектов)                            │   │
│  │  • photo_reports (фотоотчеты волонтеров)                     │   │
│  │  • photo_gallery (публичная галерея)                         │   │
│  └───────────────────────────────────────────────────────────────┘   │
│                                                                       │
│  ┌───────────────────────────────────────────────────────────────┐   │
│  │                ДОСТИЖЕНИЯ И АКТИВНОСТЬ                        │   │
│  │  • achievements (бейджи)                                      │   │
│  │  • user_achievements (связь пользователь-достижение)         │   │
│  │  • activities (история действий)                             │   │
│  └───────────────────────────────────────────────────────────────┘   │
│                                                                       │
│  ┌───────────────────────────────────────────────────────────────┐   │
│  │                  РЕЙТИНГИ                                     │   │
│  │  • ratings (детальные оценки: качество, пунктуальность)      │   │
│  └───────────────────────────────────────────────────────────────┘   │
│                                                                       │
│  ┌───────────────────────────────────────────────────────────────┐   │
│  │                КОММУНИКАЦИЯ (ЧАТ)                             │   │
│  │  • conversations (беседы: личные и групповые)                │   │
│  │  • conversation_participants (участники чатов)               │   │
│  │  • messages (сообщения в чатах)                              │   │
│  └───────────────────────────────────────────────────────────────┘   │
│                                                                       │
│  ┌───────────────────────────────────────────────────────────────┐   │
│  │              КАЛЕНДАРЬ СОБЫТИЙ                                │   │
│  │  • events (мероприятия)                                       │   │
│  │  • event_participants (участники событий)                    │   │
│  └───────────────────────────────────────────────────────────────┘   │
│                                                                       │
│  ┌───────────────────────────────────────────────────────────────┐   │
│  │              СПОНСОРЫ И ПАРТНЕРЫ                              │   │
│  │  • sponsorships (спонсирование проектов)                     │   │
│  │  • resources (ресурсы партнеров)                             │   │
│  │  • resource_requests (запросы ресурсов)                      │   │
│  └───────────────────────────────────────────────────────────────┘   │
│                                                                       │
│  ┌───────────────────────────────────────────────────────────────┐   │
│  │              ДОПОЛНИТЕЛЬНЫЕ ТАБЛИЦЫ                           │   │
│  │  • qr_codes (QR-коды проектов)                               │   │
│  │  • fcm_tokens (токены для push-уведомлений)                  │   │
│  └───────────────────────────────────────────────────────────────┘   │
│                                                                       │
│  ┌───────────────────────────────────────────────────────────────┐   │
│  │              ИНДЕКСЫ (для оптимизации)                        │   │
│  │  • idx_users_role                                             │   │
│  │  • idx_projects_organizer                                     │   │
│  │  • idx_tasks_project                                          │   │
│  │  • idx_photo_reports_status                                   │   │
│  │  • idx_messages_conversation                                  │   │
│  │  • idx_events_date                                            │   │
│  │  ... и другие (см. техническую документацию)                 │   │
│  └───────────────────────────────────────────────────────────────┘   │
│                                                                       │
└───────────────────────────────────────────────────────────────────────┘
```

---

## 🔄 Потоки данных (Data Flow)

> Потоки данных разделены на 6 частей для лучшего понимания. Каждая часть показывает параллельное взаимодействие разных ролей пользователей.

---

## 📑 Содержание потоков:

1. [**Регистрация и авторизация**](#часть-1-регистрация-и-авторизация) - Волонтер vs Организатор
2. [**Управление проектами**](#часть-2-управление-проектами) - Создание vs Просмотр
3. [**Управление задачами**](#часть-3-управление-задачами) - Создание vs Запись/Участие
4. [**Работа с фотоотчетами**](#часть-4-работа-с-фотоотчетами) - Загрузка vs Модерация
5. [**Дополнительные функции**](#часть-5-дополнительные-функции) - Достижения, Геолокация, Чат, Оффлайн
6. [**Новые роли**](#часть-6-новые-роли-модератор-спонсор-партнер) - Модератор, Спонсор, Партнер

---

## ЧАСТЬ 1: Регистрация и авторизация

### 🆚 Сравнение: ВОЛОНТЕР vs ОРГАНИЗАТОР

```
┌─────────────────────────────────────────────────────────────────────────────┐
│                    ВОЛОНТЕР                │         ОРГАНИЗАТОР            │
├────────────────────────────────────────────┼────────────────────────────────┤
│                                            │                                │
│  Регистрация (простая)                    │  Регистрация (с модерацией)    │
│  ─────────────────────                    │  ────────────────────────       │
│                                            │                                │
│  POST /api/register/                       │  POST /api/register/           │
│  {                                         │  {                             │
│    email: "volunteer@mail.com",           │    email: "org@mail.com",      │
│    password: "***",                        │    password: "***",            │
│    name: "Иван",                          │    name: "Петр",               │
│    role: "volunteer"                       │    role: "organizer",          │
│  }                                         │    org_name: "Green Earth NGO" │
│         │                                  │  }                             │
│         ▼                                  │         │                      │
│  Auth Service                              │         ▼                      │
│         │                                  │  Auth Service                  │
│         ▼                                  │         │                      │
│  CREATE user                               │         ▼                      │
│  is_approved = TRUE ✅                     │  CREATE user                   │
│         │                                  │  is_approved = FALSE ⏳        │
│         ▼                                  │         │                      │
│  INSERT users                              │         ▼                      │
│  (instant activation)                      │  INSERT users                  │
│         │                                  │  (pending approval)            │
│         ▼                                  │         │                      │
│  Response:                                 │         ▼                      │
│  {                                         │  Telegram Bot ──► Модератору   │
│    token: "JWT_...",                       │  "Новая заявка от организатора"│
│    user: {...},                            │         │                      │
│    status: "active"                        │         ▼                      │
│  }                                         │  Response:                     │
│         │                                  │  {                             │
│         ▼                                  │    token: "JWT_...",           │
│  Navigate to VolunteerPage                 │    user: {...},                │
│                                            │    status: "pending"           │
│                                            │  }                             │
│                                            │         │                      │
│                                            │         ▼                      │
│                                            │  Navigate to PendingScreen     │
│                                            │  "Ожидание одобрения..."       │
│                                            │                                │
│                                            │  ┌─────────────────────────┐   │
│                                            │  │ Модератор проверяет:    │   │
│                                            │  │ GET /admin/pending-users│   │
│                                            │  │         │               │   │
│                                            │  │         ▼               │   │
│                                            │  │ POST /admin/approve/15  │   │
│                                            │  │         │               │   │
│                                            │  │         ▼               │   │
│                                            │  │ UPDATE users            │   │
│                                            │  │ SET is_approved = TRUE  │   │
│                                            │  └─────────────────────────┘   │
│                                            │         │                      │
│                                            │         ▼                      │
│                                            │  Push: "Одобрено!" ──► 📱     │
│                                            │         │                      │
│                                            │         ▼                      │
│                                            │  Navigate to OrganizerPage     │
│                                            │                                │
└────────────────────────────────────────────┴────────────────────────────────┘
```

**Ключевые различия:**
- ✅ **Волонтер**: мгновенная активация, сразу доступ к функциям
- ⏳ **Организатор**: требуется модерация, ожидание одобрения администратором

---

## ЧАСТЬ 2: Управление проектами

### 🆚 Сравнение: СОЗДАНИЕ vs ПРОСМОТР проектов

```
┌─────────────────────────────────────────────────────────────────────────────┐
│         ОРГАНИЗАТОР (создание)     │     ВОЛОНТЕР (просмотр)                │
├────────────────────────────────────┼────────────────────────────────────────┤
│                                    │                                        │
│ Шаг 1: Создать проект              │ Шаг 1: Просмотр списка проектов       │
│ ──────────────────────             │ ────────────────────────────           │
│                                    │                                        │
│ POST /api/organizer/projects/      │ GET /api/volunteer/projects/           │
│ {                                  │ ?type=environmental                    │
│   title: "Уборка парка Горького",  │ &city=Almaty                           │
│   description: "...",              │         │                              │
│   city: "Almaty",                  │         ▼                              │
│   volunteer_type: "environmental", │  Volunteer Service                     │
│   latitude: 43.238,                │         │                              │
│   longitude: 76.945,               │         ▼                              │
│   tasks: [                         │  SELECT projects                       │
│     {                              │  WHERE volunteer_type='environmental'  │
│       text: "Собрать мусор",       │  AND city='Almaty'                     │
│       deadline: "2025-11-01",      │  AND status='active'                   │
│       start_time: "09:00",         │         │                              │
│       end_time: "12:00"            │         ▼                              │
│     },                             │  Response:                             │
│     {                              │  [                                     │
│       text: "Посадить деревья",    │    {                                   │
│       deadline: "2025-11-01",      │      id: 1,                            │
│       start_time: "13:00",         │      title: "Уборка парка Горького",   │
│       end_time: "16:00"            │      city: "Almaty",                   │
│     }                              │      volunteer_type: "environmental",  │
│   ]                                │      organizer: "Green Earth",         │
│ }                                  │      tasks: [...],                     │
│         │                          │      location: {lat: ..., lng: ...},   │
│         ▼                          │      qr_code_url: "..."                │
│  Organizer Service                 │    },                                  │
│         │                          │    {...}                               │
│         ▼                          │  ]                                     │
│  CREATE project                    │         │                              │
│  + coordinates                     │         ▼                              │
│  + status='active'                 │  Отображение карточек проектов        │
│         │                          │  - Название проекта                    │
│         ▼                          │  - Город, тип                          │
│  INSERT projects ──► DB            │  - Количество задач                    │
│         │                          │  - QR-код (для быстрого присоединения) │
│         ▼                          │                                        │
│  CREATE tasks (bulk)               │ ┌──────────────────────────┐           │
│  - Task 1                          │ │ Альтернатива: QR-сканер  │           │
│  - Task 2                          │ │ POST /api/qr/scan/       │           │
│         │                          │ │ {qr_data: "PROJECT_1"}   │           │
│         ▼                          │ │         │                │           │
│  INSERT tasks (2 rows) ──► DB      │ │         ▼                │           │
│         │                          │ │ Validate & Get project   │           │
│         ▼                          │ │         │                │           │
│  Generate QR Code                  │ │         ▼                │           │
│  - Unique code: PROJECT_1_ABC      │ │ Response: {project: ...} │           │
│         │                          │ └──────────────────────────┘           │
│         ▼                          │                                        │
│  INSERT qr_codes ──► DB            │                                        │
│         │                          │                                        │
│         ▼                          │                                        │
│  Response:                         │                                        │
│  {                                 │                                        │
│    project: {                      │                                        │
│      id: 1,                        │                                        │
│      title: "...",                 │                                        │
│      qr_code_url: "...",           │                                        │
│      status: "active"              │                                        │
│    },                              │                                        │
│    tasks: [                        │                                        │
│      {id: 10, text: "..."},        │                                        │
│      {id: 11, text: "..."}         │                                        │
│    ]                               │                                        │
│  }                                 │                                        │
│         │                          │                                        │
│         ▼                          │                                        │
│  Проект создан!                    │                                        │
│  Можно скачать QR-код              │                                        │
│                                    │                                        │
└────────────────────────────────────┴────────────────────────────────────────┘
```

**Ключевые действия:**
- 🏗️ **Организатор**: Создает проект → Добавляет задачи → Получает QR-код
- 👁️ **Волонтер**: Просматривает проекты → Фильтрует по типу/городу → Может присоединиться через QR

---

## ЧАСТЬ 3: Управление задачами

### 🆚 Сравнение: ОРГАНИЗАТОР (наблюдение) vs ВОЛОНТЕР (запись на задачу)

```
┌─────────────────────────────────────────────────────────────────────────────┐
│    ОРГАНИЗАТОР (наблюдение)        │    ВОЛОНТЕР (запись на задачу)         │
├────────────────────────────────────┼────────────────────────────────────────┤
│                                    │                                        │
│ Просмотр участников проекта        │ Просмотр задач проекта                 │
│ ────────────────────────           │ ──────────────────────                 │
│                                    │                                        │
│ GET /api/organizer/participants/1  │ GET /api/volunteer/projects/1/tasks    │
│         │                          │         │                              │
│         ▼                          │         ▼                              │
│ Organizer Service                  │ Volunteer Service                      │
│         │                          │         │                              │
│         ▼                          │         ▼                              │
│ SELECT users                       │ SELECT tasks                           │
│ JOIN tasks                         │ WHERE project_id=1                     │
│ JOIN photo_reports                 │ AND status IN ('open', 'in_progress')  │
│ JOIN ratings                       │         │                              │
│ WHERE project_id=1                 │         ▼                              │
│         │                          │ Response:                              │
│         ▼                          │ [                                      │
│ Response:                          │   {                                    │
│ [                                  │     id: 10,                            │
│   {                                │     text: "Собрать мусор",             │
│     id: 15,                        │     deadline: "2025-11-01",            │
│     name: "Иван Петров",           │     start_time: "09:00",               │
│     phone: "+7 777 123 4567",      │     end_time: "12:00",                 │
│     rating: 4.8,                   │     assigned_to: null,                 │
│     tasks_completed: 5,            │     status: "open"                     │
│     photo_reports: 3,              │   },                                   │
│     last_activity: "2025-10-20"    │   {                                    │
│   },                               │     id: 11,                            │
│   {                                │     text: "Посадить деревья",          │
│     id: 23,                        │     deadline: "2025-11-01",            │
│     name: "Мария Сидорова",        │     start_time: "13:00",               │
│     rating: 4.5,                   │     end_time: "16:00",                 │
│     tasks_completed: 3,            │     assigned_to: null,                 │
│     photo_reports: 2               │     status: "open"                     │
│   }                                │   }                                    │
│ ]                                  │ ]                                      │
│         │                          │         │                              │
│         ▼                          │         ▼                              │
│ Отображение списка:                │ Отображение карточек задач            │
│ ┌──────────────────────┐           │ ┌──────────────────────┐               │
│ │ 👤 Иван Петров      │           │ │ 📋 Собрать мусор    │               │
│ │ ⭐ 4.8  |  5 задач  │           │ │ 📅 01.11.2025       │               │
│ │ 📸 3 фото           │           │ │ ⏰ 09:00 - 12:00    │               │
│ │ [Подробнее]         │           │ │ [Записаться]        │               │
│ └──────────────────────┘           │ └──────────────────────┘               │
│                                    │         │                              │
│ Нажатие "Подробнее":               │         ▼                              │
│ GET /api/organizer/                │ POST /api/volunteer/join-task/10       │
│     /participant-details/15        │         │                              │
│         │                          │         ▼                              │
│         ▼                          │ Volunteer Service                      │
│ SELECT activities                  │         │                              │
│ SELECT ratings (detailed)          │         ▼                              │
│ SELECT photo_reports               │ UPDATE tasks                           │
│ WHERE user_id=15                   │ SET assigned_to=123                    │
│         │                          │ SET status='in_progress'               │
│         ▼                          │         │                              │
│ Response:                          │         ▼                              │
│ {                                  │ INSERT activities                      │
│   user: {                          │ (type='joined_project')                │
│     id: 15,                        │         │                              │
│     name: "Иван Петров",           │         ▼                              │
│     phone: "+7 777 123 4567",      │ Push to organizer:                     │
│     email: "ivan@mail.com"         │ "Иван записался на задачу!"            │
│   },                               │         │                              │
│   statistics: {                    │         ▼                              │
│     total_projects: 10,            │ Response:                              │
│     total_tasks: 15,               │ {                                      │
│     average_rating: 4.8            │   message: "Вы записаны!",             │
│   },                               │   task: {                              │
│   history: [                       │     id: 10,                            │
│     {                              │     text: "Собрать мусор",             │
│       date: "2025-10-20",          │     deadline: "2025-11-01"             │
│       action: "Completed task",    │   }                                    │
│       project: "Уборка парка"      │ }                                      │
│     },                             │         │                              │
│     {...}                          │         ▼                              │
│   ],                               │ Navigate to "Мои задачи"              │
│   recent_photos: [...]             │ Задача появилась в списке             │
│ }                                  │                                        │
│         │                          │ ┌──────────────────────────┐           │
│         ▼                          │ │ Отмена участия:          │           │
│ Отображение детального профиля:    │ │ DELETE /api/volunteer/   │           │
│ - Контакты                         │ │        /leave-task/10    │           │
│ - История активности               │ │         │                │           │
│ - Фотоотчеты                       │ │         ▼                │           │
│ - Рейтинги                         │ │ UPDATE tasks             │           │
│                                    │ │ SET assigned_to=NULL     │           │
│                                    │ └──────────────────────────┘           │
│                                    │                                        │
└────────────────────────────────────┴────────────────────────────────────────┘
```

**Ключевые действия:**
- 👁️ **Организатор**: Просматривает всех волонтеров → Видит статистику → Может связаться
- ✍️ **Волонтер**: Просматривает задачи → Записывается на задачу → Может отменить участие

---

## ЧАСТЬ 4: Работа с фотоотчетами

### 🆚 Сравнение: ЗАГРУЗКА vs МОДЕРАЦИЯ фотоотчетов

```
┌─────────────────────────────────────────────────────────────────────────────┐
│      ВОЛОНТЕР (загрузка фото)      │  ОРГАНИЗАТОР (модерация и рейтинг)     │
├────────────────────────────────────┼────────────────────────────────────────┤
│                                    │                                        │
│ Шаг 1: Выполнить задачу            │ Шаг 1: Просмотр фотоотчетов           │
│ ───────────────────────            │ ────────────────────────               │
│                                    │                                        │
│ Открыть камеру/галерею             │ GET /api/organizer/photo-reports/      │
│ ImagePicker (Flutter)              │ ?status=pending                        │
│         │                          │         │                              │
│         ▼                          │         ▼                              │
│ Выбрать фото                       │ Organizer Service                      │
│ File: photo.jpg                    │         │                              │
│         │                          │         ▼                              │
│         ▼                          │ SELECT photo_reports                   │
│ POST /api/volunteer/photo-reports/ │ WHERE status='pending'                 │
│ {                                  │ AND project.organizer_id=X             │
│   task_id: 10,                     │         │                              │
│   photo: <binary>,                 │         ▼                              │
│   description: "Собрали 20 мешков" │ Response:                              │
│ }                                  │ [                                      │
│         │                          │   {                                    │
│         ▼                          │     id: 50,                            │
│ Volunteer Service                  │     task: "Собрать мусор",             │
│         │                          │     volunteer: "Иван Петров",          │
│         ▼                          │     photo_url: "...",                  │
│ Save photo to /media/              │     description: "Собрали 20 мешков",  │
│ ──► /media/reports/photo_50.jpg    │     uploaded_at: "2025-10-25 14:30"    │
│         │                          │   },                                   │
│         ▼                          │   {...}                                │
│ INSERT photo_reports               │ ]                                      │
│ (status='pending')                 │         │                              │
│         │                          │         ▼                              │
│         ▼                          │ Отображение списка:                    │
│ Response:                          │ ┌──────────────────────┐               │
│ {                                  │ │ 📸 Фото от Ивана    │               │
│   message: "Отправлено на проверку"│ │ 📋 Задача: Собрать  │               │
│   photo_report: {                  │ │    мусор            │               │
│     id: 50,                        │ │ 📅 25.10.2025 14:30 │               │
│     status: "pending"              │ │ [Просмотреть]       │               │
│   }                                │ └──────────────────────┘               │
│ }                                  │         │                              │
│         │                          │         ▼                              │
│         ▼                          │ Нажатие "Просмотреть":                │
│ Push to organizer:                 │ - Открывается фото в полный экран     │
│ "Новый фотоотчет!"                 │ - Описание от волонтера               │
│         │                          │ - Детали задачи                        │
│         ▼                          │         │                              │
│ Navigate to "Мои фотоотчеты"      │         ▼                              │
│ Статус: ⏳ "На модерации"         │ Шаг 2a: ОДОБРЕНИЕ                     │
│                                    │ ──────────────────                     │
│                                    │ POST /api/organizer/                   │
│                                    │      /photo-reports/50/approve         │
│                                    │ {                                      │
│                                    │   rating: 5,                           │
│                                    │   comment: "Отличная работа!"          │
│                                    │ }                                      │
│                                    │         │                              │
│                                    │         ▼                              │
│                                    │ UPDATE photo_reports                   │
│                                    │ SET status='approved',                 │
│                                    │     rating=5,                          │
│                                    │     organizer_comment='...'            │
│                                    │         │                              │
│                                    │         ▼                              │
│                                    │ UPDATE users (volunteer)               │
│                                    │ SET rating = rating + 5                │
│                                    │         │                              │
│                                    │         ▼                              │
│                                    │ Check achievements:                    │
│                                    │ IF photos >= 20:                       │
│                                    │   INSERT user_achievements             │
│                                    │   (badge: "Фотограф")                  │
│                                    │         │                              │
│                                    │         ▼                              │
│ ◄──────────────────────────────────┼── Push: "Фотоотчет одобрен! ⭐ +5"   │
│ Статус: ✅ "Одобрено"             │         │                              │
│ Рейтинг: 5                         │         ▼                              │
│ Комментарий: "Отличная работа!"   │ Push (если новое достижение):          │
│                                    │ "Получено достижение: Фотограф! 📸"   │
│                                    │                                        │
│                                    │                                        │
│                                    │ Шаг 2b: ОТКЛОНЕНИЕ                    │
│                                    │ ──────────────────                     │
│                                    │ POST /api/organizer/                   │
│                                    │      /photo-reports/50/reject          │
│                                    │ {                                      │
│                                    │   reason: "Фото нечеткое, загрузите   │
│                                    │            новое"                      │
│                                    │ }                                      │
│                                    │         │                              │
│                                    │         ▼                              │
│                                    │ UPDATE photo_reports                   │
│                                    │ SET status='rejected',                 │
│                                    │     rejection_reason='...'             │
│                                    │         │                              │
│                                    │         ▼                              │
│ ◄──────────────────────────────────┼── Push: "Фотоотчет отклонен ❌"      │
│ Статус: ❌ "Отклонено"            │ "Причина: Фото нечеткое..."            │
│ Причина: "Фото нечеткое..."       │                                        │
│                                    │                                        │
│ Можно загрузить новое фото         │                                        │
│                                    │                                        │
└────────────────────────────────────┴────────────────────────────────────────┘
```

**Ключевые действия:**
- 📸 **Волонтер**: Выполняет задачу → Фотографирует → Загружает фото → Ждет модерации
- ✅ **Организатор**: Просматривает фото → Одобряет (с рейтингом) ИЛИ Отклоняет (с причиной)
- 🎯 **Автоматика**: При одобрении → Начисление рейтинга → Проверка достижений → Уведомления

---

## ЧАСТЬ 5: Дополнительные функции

### 5.1. Автоматическая выдача достижений 🏆

**Триггер:** Фотоотчет одобрен / Задача завершена

```
Background Service (Celery) → Achievement Service
                                      │
                                      ▼
                              SELECT user stats
                              - Всего задач: 15
                              - Всего фото: 25
                              - Средний рейтинг: 4.8
                                      │
                                      ▼
                              CHECK achievements:
                              IF tasks >= 10 → Badge "Активист" ✅
                              IF photos >= 20 → Badge "Фотограф" ✅
                                      │
                                      ▼
                              INSERT user_achievements
                                      │
                                      ▼
                              Push: "Новое достижение! 🏆"
```

### 5.2. Геолокационные напоминания 📍

**Фоновая служба** (каждые 5 мин):

```
Geolocator → Get GPS (43.240, 76.950)
                      │
                      ▼
                Map Service → Check distance to projects
                      │
                      ▼
                IF distance < 1km  → Push: "Вы рядом с проектом!"
                IF distance < 500m → Push: "Вы совсем близко!"
```

### 5.3. Real-time чат (WebSocket) 💬

```
┌─────────────┐                  ┌─────────────┐
│  Волонтер   │ ◄─────────────── │ Организатор │
└──────┬──────┘                  └──────┬──────┘
       │                                │
       │  WS Connect                    │  WS Connect
       └──────►  Django Channels  ◄─────┘
                 (Redis pub/sub)
                       │
                 Store in DB
                       │
         ┌─────────────┼─────────────┐
         │                           │
    Broadcast                   Broadcast
         │                           │
         ▼                           ▼
    Волонтер                    Организатор
    (real-time)                 (real-time)
```

### 5.4. Оффлайн режим и синхронизация 📴

```
ОФФЛАЙН:                           ОНЛАЙН (восстановлен):
────────                           ──────────────────────
Просмотр проектов                  POST /api/sync/upload/
(из Hive cache)                    {photos: [...], tasks: [...]}
                                            │
Подготовка фото                            ▼
(pending_sync=true)                   Sync Service
                                      - Validate data
                                      - Conflict resolution
                                            │
                                            ▼
                                   UPDATE local cache
                                   (synced = true)
```

### 5.5. Экспорт отчетов (PDF/Excel) 📊

**Организатор:**

```
GET /api/organizer/export-report/?project_id=5&format=pdf
                    │
                    ▼
              Analytics Service
              - Aggregate data
              - Generate charts (matplotlib)
              - Create PDF with cover, stats, charts, photos
                    │
                    ▼
              Response: project_5_report_2025_10.pdf
```

---

## ЧАСТЬ 6: Новые роли (Модератор, Спонсор, Партнер)

### 6.1. МОДЕРАТОР - Проверка и одобрение пользователей 🛡️

```
GET /api/admin/pending-users/
                │
                ▼
          Moderator Service
          - SELECT users WHERE is_approved=FALSE
                │
                ▼
          Response: [
            {id: 15, role: "organizer", org_name: "Green Earth"},
            {id: 23, role: "sponsor", org_name: "EcoFund"}
          ]
                │
                ▼
   ┌────────────┴────────────┐
   │                         │
ОДОБРИТЬ                ОТКЛОНИТЬ
   │                         │
   ▼                         ▼
UPDATE users            UPDATE users
SET is_approved=TRUE    SET is_approved=NULL,
   │                        rejection_reason='...'
   ▼                         │
Push: "Одобрено!"            ▼
                        Email/Push: "Отклонено"
```

**Аналитика платформы:**
```
GET /api/admin/platform-statistics/
        │
        ▼
   - Total users: 1250
   - Volunteers: 1000
   - Organizers: 200
   - Active projects: 45
   - Charts data
```

---

### 6.2. СПОНСОР - Финансирование проектов 💰

```
Шаг 1: Выбор проекта для спонсирования
GET /api/sponsor/projects/
        │
        ▼
   Response: [
     {id: 5, title: "Посадка деревьев", budget_needed: 500000, current_funding: 200000}
   ]

Шаг 2: Спонсировать
POST /api/sponsor/sponsor-project/
{project_id: 5, amount: 100000, purpose: "Саженцы"}
        │
        ▼
   Initiate payment (Kaspi/Stripe)
   payment_url: "https://payment.kaspi.kz/..."
        │
        ▼
   Payment completed (webhook)
   UPDATE sponsorships (status='completed')
   UPDATE project budget += 100000
        │
        ▼
   Push to organizer: "Получена спонсорская поддержка!"
   Push to sponsor: "Спасибо за поддержку!"

Просмотр отчетов:
GET /api/sponsor/project-reports/5
        │
        ▼
   {
     total_sponsored: 100000,
     expenses: [{category: "Саженцы", amount: 50000}, ...],
     impact: {trees_planted: 500, volunteers: 50}
   }
```

---

### 6.3. ПАРТНЕР - Предоставление ресурсов 🤝

```
Шаг 1: Добавить ресурс
POST /api/partner/resources/
{type: "venue", title: "Концертный зал", availability: "Weekends"}
        │
        ▼
   INSERT resources
   Response: {resource_id: 50, status: 'active'}

Шаг 2: Получение запросов от организаторов
GET /api/partner/requests/
        │
        ▼
   Response: [
     {
       id: 100,
       project: "Посадка деревьев",
       organizer: "Green Earth",
       resource: "Концертный зал",
       date: "2025-11-01"
     }
   ]

Шаг 3: Одобрение/Отклонение
POST /api/partner/approve-request/100
        │
        ▼
   UPDATE resource_requests (status='approved')
   Push to organizer: "Ваш запрос одобрен!"
```

---
                                     ▼
                              INSERT report        ──────────►  INSERT photo_reports
                              status='pending'                 (status='pending')
                                     │
                                     ▼
                     ◄──────────  Push to organizer ─────────► Firebase FCM
                     "Новый фотоотчет на модерации"
```

#### 8. Получение достижения (автоматическое)

```
Сервер (Background Task - Celery)           База данных
─────────────────────────────────           ────────────

Trigger: фотоотчет одобрен           Achievement Service
или задача завершена                        │
                                            ▼
                                    SELECT user stats ──────►  SELECT COUNT(*)
                                    - total tasks              FROM tasks
                                    - total reports            WHERE assigned_to=user_id
                                    - average rating           AND status='completed'
                                            │
                                            ▼
                                    CHECK achievements ─────►  SELECT achievements
                                    criteria:                  WHERE required_points <= X
                                    IF tasks >= 10:            AND volunteer_type = Y
                                      Badge "Активист"
                                    IF tasks >= 50:
                                      Badge "Герой города"
                                            │
                                            ▼
                                    IF new achievement:
                                    INSERT into         ─────►  INSERT user_achievements
                                    user_achievements           (user_id=123, achievement_id=5)
                                            │
                                            ▼
                                    INSERT activity     ─────►  INSERT activities
                                    "achievement_unlocked"      (type='achievement_unlocked')
                                            │
                                            ▼
                                    Push notification   ─────►  Firebase FCM
                                    "Поздравляем! Новое достижение: Активист!"
                                            │
                                            ▼
Клиент                         ◄──────────┘
Shows badge animation
```

#### 9. Геолокационное напоминание

```
Клиент (Background)                Сервер                      База данных
───────────────────               ───────                     ────────────

1. Фоновая служба              Map Service
   Geolocator                       │
   (каждые 5 мин)                   │
        │                           │
        ▼                           │
   Get current GPS    ──────────►   │
   lat: 43.240                      ▼
   lng: 76.950                Check distance        ──────►  SELECT projects
                              to user's projects            JOIN tasks
                              WHERE assigned_to=user        WHERE assigned_to=123
                                      │                     AND status='in_progress'
                                      ▼
                              Calculate distance
                              (Haversine formula)
                                      │
                                      ▼
                              IF distance < 1km:
                                "Вы рядом с проектом!"
                              IF distance < 500m:
                                "Вы совсем близко!"
                                      │
                                      ▼
                     ◄──────────  Send FCM     ──────────►  Firebase Cloud
                     notification                            Messaging
                     (geofencing trigger)                         │
                                                                  ▼
Клиент                                                   ◄────────┘
Display local notification
"📍 Вы рядом с проектом 'Уборка парка'. Не забудьте о задаче!"
```

---

### 🛡️ МОДЕРАТОР (Moderator)

#### 10. Модерация заявки организатора

```
Клиент (Moderator)                 Сервер                      База данных
──────────────────                ───────                     ────────────

1. GET /api/admin/              Moderator Service
   /pending-users/      ───────►     │
                                     ▼
                              SELECT users      ──────────►  SELECT users
                              WHERE role IN                  WHERE is_approved=FALSE
                                ('organizer',                AND role IN (...)
                                 'sponsor',
                                 'partner')
                              AND is_approved=FALSE
                                     │
                     ◄───────────────┘
   [
     {
       id: 15,
       name: "Green Earth NGO",
       role: "organizer",
       org_name: "Green Earth",
       documents: [...],
       created_at: "2025-10-20"
     },
     ...
   ]

2. Просмотр деталей
   GET /api/admin/             Moderator Service
   /user-details/15    ───────►    │
                                   ▼
                              SELECT full info  ──────────►  SELECT users
                              + submitted docs               (detailed)
                                   │
                     ◄─────────────┘
   {
     user: {...},
     organization_details: {...},
     contact_info: {...}
   }

3a. ОДОБРЕНИЕ                  Moderator Service
    POST /api/admin/    ──────►    │
    /approve-user/15               ▼
                              UPDATE user        ──────────►  UPDATE users
                              is_approved=TRUE                SET is_approved=TRUE
                                   │                          WHERE id=15
                                   ▼
                              INSERT activity    ──────────►  INSERT activities
                              "user_approved"                 (type='user_approved')
                                   │
                                   ▼
                     ◄──────  Push notification ──────────►  Firebase FCM
                     "Ваша заявка одобрена! Добро пожаловать в BirQadam"

3b. ОТКЛОНЕНИЕ
    POST /api/admin/    ──────►  Moderator Service
    /reject-user/15                   │
    {                                 ▼
      reason: "Недостаточно       UPDATE user        ──────►  UPDATE users
               информации"        is_approved=NULL            SET is_approved=NULL,
    }                             rejection_reason='...'          rejection_reason='...'
                                       │
                                       ▼
                     ◄──────  Email/Push notification
                     "Заявка отклонена. Причина: ..."
```

#### 11. Модерация проекта (опционально)

```
Клиент (Moderator)                 Сервер                      База данных
──────────────────                ───────                     ────────────

1. GET /api/admin/              Moderator Service
   /pending-projects/   ───────►    │
                                    ▼
                              SELECT projects  ──────────►  SELECT projects
                              WHERE status='pending'        WHERE status='pending'
                                    │
                     ◄──────────────┘
   [
     {
       id: 20,
       title: "Сомнительный проект",
       organizer: "...",
       description: "..."
     }
   ]

2. POST /api/admin/             Moderator Service
   /approve-project/20  ───────►    │
                                    ▼
                              UPDATE project   ──────────►  UPDATE projects
                              status='active'               SET status='active'
                                    │
                                    ▼
                     ◄──────  Notification to organizer
                     "Ваш проект одобрен и опубликован!"
```

#### 12. Просмотр общей аналитики платформы

```
Клиент (Moderator)                 Сервер                      База данных
──────────────────                ───────                     ────────────

GET /api/admin/                Moderator Service
/platform-statistics/  ───────►     │
                                    ▼
                              Aggregate data:   ──────────►  Multiple queries:
                              - Total users                  SELECT COUNT(*) FROM users
                              - By role                      GROUP BY role
                              - Active projects              SELECT COUNT(*) FROM projects
                              - Completed tasks              WHERE status='active'
                              - Total ratings                ...
                              - Growth trends
                                    │
                                    ▼
                              Generate charts
                              (matplotlib/fl_chart data)
                                    │
                     ◄──────────────┘
   {
     total_users: 1250,
     volunteers: 1000,
     organizers: 200,
     sponsors: 30,
     partners: 20,
     active_projects: 45,
     completed_projects: 120,
     pending_approvals: 15,
     charts_data: {...}
   }
```

---

### 💰 СПОНСОР (Sponsor)

#### 13. Спонсирование проекта

```
Клиент (Sponsor)                   Сервер                      База данных
────────────────                  ───────                     ────────────

1. GET /api/sponsor/            Sponsor Service
   /projects/          ───────►      │
   ?type=environmental               ▼
                              SELECT projects   ──────────►  SELECT projects
                              + statistics                  JOIN tasks
                              (volunteers, tasks)           WHERE status='active'
                                      │
                     ◄───────────────┘
   [
     {
       id: 5,
       title: "Посадка деревьев",
       organizer: "Green Earth",
       budget_needed: 500000,
       current_funding: 200000,
       volunteers: 50
     },
     ...
   ]

2. POST /api/sponsor/           Sponsor Service
   /sponsor-project/    ───────►     │
   {                                 ▼
     project_id: 5,            CREATE sponsorship ─────────►  INSERT sponsorships
     amount: 100000,           record                         (sponsor_id=123,
     purpose: "Саженцы"        status='pending'                project_id=5,
   }                                  │                         amount=100000,
                                      ▼                         status='pending')
                              Initiate payment
                              (Stripe/Kaspi API)
                                      │
                     ◄───────────────┘
   {
     payment_url: "https://payment.kaspi.kz/...",
     transaction_id: "TXN_12345"
   }

3. Payment completed           Payment Gateway
   Webhook callback    ───────►     │
                                    ▼
                              UPDATE sponsorship ─────────►  UPDATE sponsorships
                              status='completed'             SET status='completed',
                              transaction_id='...'               transaction_id='TXN_12345'
                                    │
                                    ▼
                              UPDATE project     ─────────►  UPDATE projects
                              budget += 100000                (increment budget)
                                    │
                                    ▼
                              Push to organizer  ─────────►  Firebase FCM
                              "Ваш проект получил спонсорскую поддержку!"
                                    │
                                    ▼
                              Push to sponsor    ─────────►  Firebase FCM
                              "Спасибо за поддержку проекта!"
                                    │
                                    ▼
                     ◄──────────────┘
   {
     status: 'success',
     receipt_url: 'https://...'
   }
```

#### 14. Просмотр отчета о расходовании средств

```
Клиент (Sponsor)                   Сервер                      База данных
────────────────                  ───────                     ────────────

GET /api/sponsor/               Sponsor Service
/project-reports/5      ───────►     │
                                     ▼
                              SELECT sponsorship ─────────►  SELECT sponsorships
                              + project expenses            WHERE sponsor_id=123
                                     │                      AND project_id=5
                                     ▼
                              SELECT organizer   ─────────►  SELECT expenses
                              financial report               (from project budget)
                              - Equipment: 40000
                              - Materials: 50000
                              - Transport: 10000
                                     │
                     ◄───────────────┘
   {
     total_sponsored: 100000,
     expenses: [
       {category: "Саженцы", amount: 50000},
       {category: "Инструменты", amount: 30000},
       {category: "Транспорт", amount: 20000}
     ],
     balance: 0,
     project_status: "completed",
     impact: {
       trees_planted: 500,
       volunteers: 50,
       area_covered: "10 га"
     }
   }
```

---

### 🤝 ПАРТНЕР (Partner)

#### 15. Предоставление ресурса проекту

```
Клиент (Partner)                   Сервер                      База данных
────────────────                  ───────                     ────────────

1. POST /api/partner/           Partner Service
   /resources/         ───────►      │
   {                                 ▼
     type: "venue",            CREATE resource   ──────────►  INSERT resources
     title: "Концертный зал",  record                         (partner_id=123,
     description: "...",                                       type='venue',
     availability: "Weekends"                                  ...)
   }                                 │
                     ◄───────────────┘
   {
     resource_id: 50,
     status: 'active'
   }

2. Организатор запрашивает    Organizer делает запрос
   GET /api/resources/  ─────►  Resource Service
                                     │
                                     ▼
                              SELECT resources  ──────────►  SELECT resources
                              WHERE type='venue'            WHERE type='venue'
                              AND availability='...'         AND partner_id IS NOT NULL
                                     │
                     ◄───────────────┘

3. POST /api/organizer/         Organizer Service
   /request-resource/   ───────►    │
   {                                ▼
     resource_id: 50,           CREATE request    ──────────►  INSERT resource_requests
     project_id: 5,             status='pending'               (resource_id=50,
     date: "2025-11-01",                                        project_id=5,
     notes: "Нужен зал"                                         status='pending')
   }                                 │
                                     ▼
                     ◄──────  Push to partner  ──────────►  Firebase FCM
                     "Новый запрос на ресурс"

4. Партнер проверяет           Partner Service
   GET /api/partner/    ───────►    │
   /requests/                        ▼
                              SELECT requests   ──────────►  SELECT resource_requests
                              WHERE resource_id             JOIN projects
                                IN (my resources)           JOIN users
                                     │
                     ◄───────────────┘
   [
     {
       id: 100,
       project: "Посадка деревьев",
       organizer: "Green Earth",
       resource: "Концертный зал",
       date: "2025-11-01",
       notes: "..."
     }
   ]

5a. ОДОБРЕНИЕ                  Partner Service
    POST /api/partner/  ──────►    │
    /approve-request/100           ▼
                              UPDATE request    ──────────►  UPDATE resource_requests
                              status='approved'             SET status='approved'
                                   │
                                   ▼
                     ◄──────  Push to organizer ─────────►  Firebase FCM
                     "Ваш запрос на ресурс одобрен!"

5b. ОТКЛОНЕНИЕ
    POST /api/partner/  ──────►  Partner Service
    /reject-request/100              │
    {                                ▼
      reason: "Занято"          UPDATE request    ──────────►  UPDATE resource_requests
    }                           status='rejected'             SET status='rejected'
                                     │
                     ◄──────  Notification
                     "Запрос отклонен. Причина: Занято"
```

---

### 🔄 ОБЩИЕ ПОТОКИ

#### 16. Real-time чат (WebSocket)

```
Клиент A (Волонтер)        WebSocket Server              Клиент B (Организатор)
───────────────────        ────────────────              ──────────────────────

WS Connect          ─────►  Django Channels
ws://api/chat/5             (Redis для pub/sub)  ◄─────  WS Connect
                                    │
                               Subscribe to
                               channel: chat_5
                                    │
Send message        ─────►    Store in DB         ─────►  INSERT messages
{                             + Broadcast                 (conversation_id=5)
  text: "Привет!",                 │
  conversation_id: 5               │
}                                  ├─────────────────────► Receive message
                                   │                      (real-time)
                                   │                      {
                                   │                        text: "Привет!",
                                   │                        sender: "Волонтер A",
                                   │                        timestamp: "..."
                                   │                      }
                                   ▼
                            UPDATE last_read      ─────►  UPDATE conversation_participants
                            for user A                    SET last_read_at=NOW()
```

#### 17. Оффлайн режим и синхронизация

```
Клиент (оффлайн)              Локальная БД              Сервер (при подключении)
────────────────              ────────────              ────────────────────────

Просмотр проектов  ──────►   SELECT from Hive
                              (кешированные)
                              WHERE cached_at > NOW() - 7days

Подготовка фото    ──────►   INSERT photo
                              (pending_sync=true)
                              + queue for upload

Просмотр задач     ──────►   SELECT tasks
                              FROM local cache

───────────── Интернет восстановлен ─────────────

Sync Service (автоматически)
     │
     ▼
SELECT pending      ◄──────  Hive/SQLite
data                         WHERE pending_sync=true
     │
     ▼
POST /api/sync/     ──────►  Sync Service         ──────►  Batch operations:
upload/                      - Validate data                INSERT photo_reports
{                            - Check conflicts              UPDATE tasks
  photos: [...],             - Merge data                   INSERT activities
  tasks: [...],                   │
  activities: [...]               ▼
}                           Conflict resolution
                            (last-write-wins or
                             manual resolution)
                                  │
                                  ▼
                     ◄──────  Response:
   {                          {
     synced_photos: 3,          synced: true,
     synced_tasks: 2,           conflicts: [],
     synced_activities: 5,      new_data: {...}
     conflicts: 0             }
   }                                │
     │                             ▼
     ▼                        UPDATE local cache ──────►  UPDATE Hive/SQLite
UPDATE local        ──────►   (pending_sync=false)         SET pending_sync=false
status                        + refresh with server data   + update cached_at
(sync completed)
```

---

## 🎯 Ключевые особенности архитектуры

### ✅ Масштабируемость
- **Микросервисная структура** – каждый модуль независим
- **Кеширование (Redis)** – для WebSocket и часто запрашиваемых данных
- **Индексы БД** – оптимизация запросов
- **Pagination** – для больших списков

### ✅ Безопасность
- **JWT Tokens** – безопасная аутентификация
- **HTTPS** – шифрование всех запросов
- **Модерация** – проверка организаторов перед активацией
- **Валидация данных** – на клиенте и сервере

### ✅ Производительность
- **Оффлайн-first** – работа без интернета
- **Локальный кеш** – быстрый доступ к данным
- **Lazy loading** – загрузка по требованию
- **WebSocket** – real-time без постоянных HTTP запросов

### ✅ Надежность
- **Синхронизация данных** – конфликт-резолвинг
- **Backup БД** – регулярные резервные копии
- **Error handling** – обработка ошибок на всех уровнях
- **Logging** – логирование всех действий

### ✅ UX/UI
- **Быстрый отклик** – skeleton loaders
- **Push-уведомления** – вовлечение пользователей
- **Геолокационные напоминания** – умные уведомления
- **QR-коды** – быстрое присоединение

---

## 📊 Статистика системы

### Количество таблиц: **16**
- Основные: 6 (users, projects, tasks, photo_reports, achievements, activities)
- Связующие: 4 (user_achievements, conversation_participants, event_participants, resource_requests)
- Дополнительные: 6 (ratings, conversations, messages, events, sponsorships, resources, qr_codes, fcm_tokens, photo_gallery)

### Количество API endpoints: **60+**
- Authentication: 4
- Volunteer: 10
- Organizer: 12
- Moderator: 6
- Sponsor/Partner: 8
- Chat: 6
- Calendar: 6
- Maps: 2
- QR Codes: 3
- Other: 5+

### Роли пользователей: **5**
1. Волонтер (Volunteer)
2. Организатор (Organizer)
3. Модератор (Moderator)
4. Спонсор (Sponsor)
5. Партнер (Partner)

---

**Дата создания:** 24 октября 2025 г.  
**Версия:** 1.0  
**Контакт:** info@birqadam.kz

